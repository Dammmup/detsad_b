import mongoose from "mongoose";
import * as XLSX from "xlsx";
import fs from "fs";
import path from "path";
import dotenv from "dotenv";

import Child from "../entities/children/model";
import User from "../entities/users/model";
import ChildPayment from "../entities/childPayment/model";
import Group from "../entities/groups/model"; // üëà –¥–æ–±–∞–≤–∏–ª –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ –≥—Ä—É–ø–ø

dotenv.config();

const MONGO_URI = process.env.MONGO_URI || "mongodb://localhost:27017/yourdb";
const EXCEL_FILE = path.join(__dirname, "../../–û–∫—Ç—è–±—Ä—å.xlsx");
const LOG_FILE = path.join(__dirname, "import-log.txt");

// üëá –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º —Å—Ç—Ä–æ–∫–∏ (–¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è)
const normalize = (str?: string): string =>
  (str || "")
    .trim()
    .replace(/\s+/g, "")
    .replace(/[‚Äô'`]/g, "")
    .toLowerCase();

(async () => {
  const logStream = fs.createWriteStream(LOG_FILE, { flags: "a" });
  const log = (msg: string) => {
    console.log(msg);
    logStream.write(`[${new Date().toISOString()}] ${msg}\n`);
  };

  try {
    await mongoose.connect(MONGO_URI);
    log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.");

    // –ó–∞–≥—Ä—É–∂–∞–µ–º Excel-—Ñ–∞–π–ª
    const workbook = XLSX.readFile(EXCEL_FILE);
    const sheet = workbook.Sheets[workbook.SheetNames[0]];
    const data = XLSX.utils.sheet_to_json(sheet, { header: 1 }).slice(6); // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 6 —Å—Ç—Ä–æ–∫

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ —Å—É—â–Ω–æ—Å—Ç–∏
    const [children, users, groups] = await Promise.all([
      Child.find(),
      User.find(),
      Group.find(),
    ]);

    const created: string[] = [];
    const skipped: string[] = [];

    for (const row of data) {
      const [
        name,
        location,
        department, // üëà –∫–æ–ª–æ–Ω–∫–∞ "–û—Ç–¥–µ–ª"
        position,
        period,
        salary,
        bonuses,
        deductions,
        taxesWorker,
        taxesEmployer,
        loan,
        netSalary,
        companyCost,
      ] = row as string[];

      if (!name || typeof name !== "string" || name.trim() === "") continue;

      const normalizedName = normalize(name);
      const normalizedDept = normalize(department);

      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ä–µ–±—ë–Ω–æ–∫ —ç—Ç–æ –∏–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫
      const isChild = /–≤–æ—Å–ø–∏—Ç–∞–Ω|—Ä–µ–±–µ–Ω|—Ä–µ–±—ë–Ω|child/i.test(position || "");

      // –ò—â–µ–º —á–µ–ª–æ–≤–µ–∫–∞ –ø–æ –∏–º–µ–Ω–∏
      const match = isChild
        ? children.find((c) => {
            const dbName = normalize(c.fullName);
            return (
              dbName === normalizedName ||
              dbName.startsWith(normalizedName) ||
              normalizedName.startsWith(dbName)
            );
          })
        : users.find((u) => {
            const dbName = normalize(u.fullName);
            return (
              dbName === normalizedName ||
              dbName.startsWith(normalizedName) ||
              normalizedName.startsWith(dbName)
            );
          });

      if (!match) {
        skipped.push(`${name} (${isChild ? "—Ä–µ–±—ë–Ω–æ–∫" : "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"})`);
        log(`‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ: ${name}`);
        continue;
      }

      // üëá –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø—ã (—Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º "–û—Ç–¥–µ–ª" –∏–∑ Excel –∏ –∏–º—è –≥—Ä—É–ø–ø—ã –∏–∑ –±–∞–∑—ã)
      const matchedGroup = groups.find(
        (g) =>
          normalize(g.name) === normalizedDept ||
          normalize(g.name).startsWith(normalizedDept) ||
          normalizedDept.startsWith(normalize(g.name))
      );

      // –°–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç–µ–∂
      await ChildPayment.create({
        childId: isChild ? match._id : undefined,
        userId: isChild ? undefined : match._id,
        groupId: matchedGroup ? matchedGroup._id : match.groupId || undefined, // üëà –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –≥—Ä—É–ø–ø–µ –∏–∑ Excel
        period: period || "–û–∫—Ç—è–±—Ä—å 2025",
        amount: Number(salary) || 0,
        total: Number(netSalary) || 0,
        status: "active",
        latePenalties: Number(taxesWorker) || 0,
        absencePenalties: Number(taxesEmployer) || 0,
        penalties: Number(deductions) || 0,
        accruals: Number(bonuses) || 0,
        paidAmount: Number(companyCost) || 0,
      });

      created.push(match.fullName);
      log(
        `‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: ${match.fullName} (${isChild ? "—Ä–µ–±—ë–Ω–æ–∫" : "—Å–æ—Ç—Ä—É–¥–Ω–∏–∫"}), –≥—Ä—É–ø–ø–∞: ${
          matchedGroup ? matchedGroup.name : "‚ùå –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        }`
      );
    }

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    log("\n=== üìä –ò—Ç–æ–≥ ===");
    log(`–í—Å–µ–≥–æ —Å—Ç—Ä–æ–∫ –≤ —Ñ–∞–π–ª–µ: ${data.length}`);
    log(`–°–æ–∑–¥–∞–Ω–æ –ø–ª–∞—Ç–µ–∂–µ–π: ${created.length}`);
    log(`–ü—Ä–æ–ø—É—â–µ–Ω–æ: ${skipped.length}`);

    if (skipped.length > 0) {
      log("\n‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã:");
      skipped.forEach((s) => log(` - ${s}`));
    }

    log("‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.");
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞:", err);
  } finally {
    await mongoose.disconnect();
    log("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å MongoDB –∑–∞–∫—Ä—ã—Ç–æ.");
  }
})();
