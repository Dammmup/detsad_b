// –°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –±–µ–∑ Jest
import { validateDocument, validateDocumentTemplate } from '../utils/validation';

interface TestResult {
  name: string;
  passed: boolean;
  errors: string[];
}

class ValidationTester {
  private tests: TestResult[] = [];

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
  private addTest(name: string, passed: boolean, errors: string[] = []) {
    this.tests.push({ name, passed, errors });
  }

  // –¢–µ—Å—Ç—ã –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  private testDocuments() {
    console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ ===\n');

    // –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    const validDocument = {
      title: 'Test Document',
      type: 'contract',
      category: 'staff',
      fileName: 'test.pdf',
      fileSize: 1024,
      filePath: '/uploads/test.pdf',
      uploader: 'user123',
      status: 'active'
    };

    const result1 = validateDocument(validDocument);
    this.addTest('–í–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç', result1.isValid, result1.errors);
    console.log(`1. –í–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç: ${result1.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (!result1.isValid) {
      console.log(`   –û—à–∏–±–∫–∏: ${result1.errors.join(', ')}`);
    }

    // –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
    const invalidDocument = {
      title: 'Test Document'
      // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    };

    const result2 = validateDocument(invalidDocument);
    this.addTest('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è)', !result2.isValid, result2.errors);
    console.log(`2. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è): ${!result2.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (result2.isValid) {
      console.log('   –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   –ü–æ–ª—É—á–µ–Ω—ã –æ—à–∏–±–∫–∏: ${result2.errors.join(', ')}`);
    }

    // –¢–µ—Å—Ç 3: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞
    const invalidTypeDocument = {
      title: 'Test Document',
      type: 'invalid-type',
      category: 'staff',
      fileName: 'test.pdf',
      fileSize: 1024,
      filePath: '/uploads/test.pdf',
      uploader: 'user123',
      status: 'active'
    };

    const result3 = validateDocument(invalidTypeDocument);
    this.addTest('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞', !result3.isValid, result3.errors);
    console.log(`3. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —Ç–∏–ø –¥–æ–∫—É–º–µ–Ω—Ç–∞: ${!result3.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (result3.isValid) {
      console.log('   –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: ${result3.errors.join(', ')}`);
    }

    // –¢–µ—Å—Ç 4: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const negativeSizeDocument = {
      title: 'Test Document',
      type: 'contract',
      category: 'staff',
      fileName: 'test.pdf',
      fileSize: -1024, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      filePath: '/uploads/test.pdf',
      uploader: 'user123',
      status: 'active'
    };

    const result4 = validateDocument(negativeSizeDocument);
    this.addTest('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞', !result4.isValid, result4.errors);
    console.log(`4. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: ${!result4.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (result4.isValid) {
      console.log('   –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: ${result4.errors.join(', ')}`);
    }

    console.log('\n');
  }

  // –¢–µ—Å—Ç—ã –¥–ª—è —à–∞–±–ª–æ–Ω–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
  private testTemplates() {
    console.log('=== –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —à–∞–±–ª–æ–Ω–æ–≤ ===\n');

    // –¢–µ—Å—Ç 1: –í–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω
    const validTemplate = {
      name: 'Test Template',
      type: 'contract',
      category: 'staff',
      fileName: 'template.docx',
      fileSize: 2048,
      filePath: '/templates/template.docx',
      version: '1.0',
      isActive: true
    };

    const result1 = validateDocumentTemplate(validTemplate);
    this.addTest('–í–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω', result1.isValid, result1.errors);
    console.log(`1. –í–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω: ${result1.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (!result1.isValid) {
      console.log(`   –û—à–∏–±–∫–∏: ${result1.errors.join(', ')}`);
    }

    // –¢–µ—Å—Ç 2: –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è)
    const invalidTemplate = {
      name: 'Test Template'
      // –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    };

    const result2 = validateDocumentTemplate(invalidTemplate);
    this.addTest('–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è)', !result2.isValid, result2.errors);
    console.log(`2. –ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —à–∞–±–ª–æ–Ω (–æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–æ–ª—è): ${!result2.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (result2.isValid) {
      console.log('   –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   –ü–æ–ª—É—á–µ–Ω—ã –æ—à–∏–±–∫–∏: ${result2.errors.join(', ')}`);
    }

    // –¢–µ—Å—Ç 3: –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞
    const invalidCategoryTemplate = {
      name: 'Test Template',
      type: 'contract',
      category: 'invalid-category',
      fileName: 'template.docx',
      fileSize: 2048,
      filePath: '/templates/template.docx',
      version: '1.0',
      isActive: true
    };

    const result3 = validateDocumentTemplate(invalidCategoryTemplate);
    this.addTest('–ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞', !result3.isValid, result3.errors);
    console.log(`3. –ù–µ–≤–∞–ª–∏–¥–Ω–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —à–∞–±–ª–æ–Ω–∞: ${!result3.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (result3.isValid) {
      console.log('   –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: ${result3.errors.join(', ')}`);
    }

    // –¢–µ—Å—Ç 4: –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞
    const negativeSizeTemplate = {
      name: 'Test Template',
      type: 'contract',
      category: 'staff',
      fileName: 'template.docx',
      fileSize: -2048, // –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
      filePath: '/templates/template.docx',
      version: '1.0',
      isActive: true
    };

    const result4 = validateDocumentTemplate(negativeSizeTemplate);
    this.addTest('–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞', !result4.isValid, result4.errors);
    console.log(`4. –û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ —à–∞–±–ª–æ–Ω–∞: ${!result4.isValid ? '–£–°–ü–ï–•' : '–û–®–ò–ë–ö–ê'}`);
    if (result4.isValid) {
      console.log('   –û–∂–∏–¥–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞, –Ω–æ –≤–∞–ª–∏–¥–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   –ü–æ–ª—É—á–µ–Ω–∞ –æ—à–∏–±–∫–∞: ${result4.errors.join(', ')}`);
    }

    console.log('\n');
  }

  // –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
  public runTests() {
    console.log('–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤–∞–ª–∏–¥–∞—Ü–∏–∏...\n');

    this.testDocuments();
    this.testTemplates();

    // –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    console.log('=== –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ===');
    let passed = 0;
    let failed = 0;

    this.tests.forEach(test => {
      if (test.passed) {
        passed++;
        console.log(`‚úì ${test.name}`);
      } else {
        failed++;
        console.log(`‚úó ${test.name}`);
        if (test.errors.length > 0) {
          console.log(`   –û—à–∏–±–∫–∏: ${test.errors.join(', ')}`);
        }
      }
    });

    console.log(`\n–ò—Ç–æ–≥–æ: ${passed} –ø—Ä–æ–π–¥–µ–Ω–æ, ${failed} –ø—Ä–æ–≤–∞–ª–µ–Ω–æ`);
    
    if (failed === 0) {
      console.log('\nüéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!');
    } else {
      console.log(`\n‚ùå ${failed} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–≤–∞–ª–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é.`);
    }
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
const tester = new ValidationTester();
tester.runTests();