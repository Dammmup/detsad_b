import mongoose from 'mongoose';
import User from '../models/Users';
import Payroll from '../models/Payroll';
import Report from '../models/Report';
import StaffAttendance from '../models/StaffAttendance';
import Fine from '../models/Fine';
import dotenv from 'dotenv';

dotenv.config();

const populatePayrollAndReportsData = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const mongoURI = process.env.MONGO_URI || process.env.MONGODB_URI || 'mongodb://localhost:27017/kindergarten';
    await mongoose.connect(mongoURI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ, –æ—Ç—á–µ—Ç–∞—Ö, —à—Ç—Ä–∞—Ñ–∞—Ö –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
    await Payroll.deleteMany({});
    await Report.deleteMany({ type: 'salary' });
    await Fine.deleteMany({});
    await StaffAttendance.deleteMany({});
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ, –∑–∞—Ä–ø–ª–∞—Ç–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞—Ö, —à—Ç—Ä–∞—Ñ–∞—Ö –∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ç–∏–ø–æ–º adult
    const staff = await User.find({ type: 'adult' });
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${staff.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);

    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∏ —à—Ç—Ä–∞—Ñ–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    for (const employee of staff) {
      // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
      const daysInMonth = new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate();
      const baseSalary = 150000;
      let totalPenalties = 0;

      for (let day = 1; day <= daysInMonth; day++) {
        const date = new Date(new Date().getFullYear(), new Date().getMonth(), day);
        
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏ (—Å—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ)
        if (date.getDay() === 0 || date.getDay() === 6) continue;

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏
        const startTime = '09:00';
        const endTime = '18:00';
        
        // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞ (–æ—Ç 08:30 –¥–æ 10:00 –¥–ª—è –æ–ø–æ–∑–¥–∞–Ω–∏–π)
        const hour = Math.floor(Math.random() * 2) + 8; // 8 –∏–ª–∏ 9
        const minute = Math.floor(Math.random() * 4) * 15; // 0, 15, 30 –∏–ª–∏ 45
        const actualStart = `${hour}:${minute < 10 ? '0' + minute : minute}`;
        
        // –°–ª—É—á–∞–π–Ω–æ–µ –≤—Ä–µ–º—è —É—Ö–æ–¥–∞ (–æ—Ç 17:00 –¥–æ 18:30)
        const endHour = Math.floor(Math.random() * 2) + 17; // 17 –∏–ª–∏ 18
        const endMinute = Math.floor(Math.random() * 4) * 15; // 0, 15, 30 –∏–ª–∏ 45
        const actualEnd = `${endHour}:${endMinute < 10 ? '0' + endMinute : endMinute}`;
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–ø–æ–∑–¥–∞–Ω–∏–µ
        let lateMinutes = 0;
        if (actualStart > startTime) {
          const [actualHour, actualMin] = actualStart.split(':').map(Number);
          const [startHour, startMin] = startTime.split(':').map(Number);
          lateMinutes = (actualHour - startHour) * 60 + (actualMin - startMin);
        }
        
        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º —Ä–∞–Ω–Ω–∏–π —É—Ö–æ–¥
        let earlyLeaveMinutes = 0;
        if (actualEnd < endTime) {
          const [actualHour, actualMin] = actualEnd.split(':').map(Number);
          const [endHour, endMin] = endTime.split(':').map(Number);
          earlyLeaveMinutes = (endHour - actualHour) * 60 + (endMin - actualMin);
        }
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
        let status = 'completed';
        if (lateMinutes > 15) status = 'late';
        if (lateMinutes === 0 && earlyLeaveMinutes === 0) status = 'completed';
        
        const attendanceRecord = new StaffAttendance({
          staffId: employee._id,
          date,
          shiftType: 'full',
          startTime,
          endTime,
          actualStart,
          actualEnd,
          breakTime: 60, // 1 —á–∞—Å –ø–µ—Ä–µ—Ä—ã–≤
          status,
          lateMinutes,
          earlyLeaveMinutes,
          markedBy: employee._id
        });
        
        await attendanceRecord.save();
        
        // –ù–∞—á–∏—Å–ª—è–µ–º —à—Ç—Ä–∞—Ñ –∑–∞ –æ–ø–æ–∑–¥–∞–Ω–∏–µ (500 —Ç–µ–Ω–≥–µ –∑–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç –æ–ø–æ–∑–¥–∞–Ω–∏—è)
        if (lateMinutes > 0) {
          const lateFineAmount = Math.ceil(lateMinutes / 15) * 500;
          totalPenalties += lateFineAmount;
          
          const lateFine = new Fine({
            user: employee._id,
            amount: lateFineAmount,
            reason: `–û–ø–æ–∑–¥–∞–Ω–∏–µ –Ω–∞ ${lateMinutes} –º–∏–Ω—É—Ç`,
            type: 'late',
            date
          });
          
          await lateFine.save();
        }
      }
      
      // –°–æ–∑–¥–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä—É—á–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–æ–≤ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
      const manualFineCount = Math.floor(Math.random() * 3); // 0-2 —Ä—É—á–Ω—ã—Ö —à—Ç—Ä–∞—Ñ–∞
      for (let i = 0; i < manualFineCount; i++) {
        const fineAmount = Math.floor(Math.random() * 10000) + 1000; // 1000-10000 —Ç–µ–Ω–≥–µ
        const fineReasons = [
          '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Ç—Ä—É–¥–æ–≤–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã',
          '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –æ–±—è–∑–∞–Ω–Ω–æ—Å—Ç–µ–π',
          '–û–ø–æ–∑–¥–∞–Ω–∏–µ –±–µ–∑ —É–≤–∞–∂–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–∏—á–∏–Ω—ã',
          '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Å –¥–µ—Ç—å–º–∏',
          '–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–∞–Ω–∏—Ç–∞—Ä–Ω—ã—Ö –Ω–æ—Ä–º'
        ];
        const randomReason = fineReasons[Math.floor(Math.random() * fineReasons.length)];
        
        const manualFine = new Fine({
          user: employee._id,
          amount: fineAmount,
          reason: randomReason,
          type: 'other',
          date: new Date()
        });
        
        await manualFine.save();
        totalPenalties += fineAmount;
      }
      
      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
      const bonuses = Math.floor(Math.random() * 30000); // 0-300 —Ç–µ–Ω–≥–µ –ø—Ä–µ–º–∏–∏
      const total = baseSalary + bonuses - totalPenalties;
      
      const payrollData = new Payroll({
        staffId: employee._id,
        month: currentMonth,
        accruals: baseSalary,
        bonuses,
        penalties: totalPenalties,
        deductions: 0,
        total,
        status: ['draft', 'approved', 'paid'][Math.floor(Math.random() * 3)],
        history: [{
          date: new Date(),
          action: '–°–æ–∑–¥–∞–Ω —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç',
          amount: total,
          comment: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å –±–æ–Ω—É—Å–∞–º–∏ –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏'
        }]
      });

      await payrollData.save();
      console.log(`üí∞ –°–æ–∑–¥–∞–Ω —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è ${employee.fullName}`);
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω—ã –∑–∞–ø–∏—Å–∏ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –¥–ª—è ${staff.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);
    
    // –ü–æ–¥—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    let totalAccruals = 0;
    let totalBonuses = 0;
    let totalPenalties = 0;
    let totalPayout = 0;
    
    const payrolls = await Payroll.find({ month: currentMonth });
    for (const payroll of payrolls) {
      totalAccruals += payroll.accruals;
      totalBonuses += payroll.bonuses;
      totalPenalties += payroll.penalties;
      totalPayout += payroll.total;
    }
    
    const reportData = {
      title: `–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ ${currentMonth}`,
      type: 'salary',
      description: `–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ ${currentMonth}`,
      dateRange: {
        startDate: new Date(`${currentMonth}-01`),
        endDate: new Date(`${currentMonth}-${new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate()}`)
      },
      data: {
        totalEmployees: staff.length,
        totalAccruals,
        totalBonuses,
        totalPenalties,
        totalPayout,
        avgAccruals: staff.length ? Math.round(totalAccruals / staff.length) : 0,
        avgBonuses: staff.length ? Math.round(totalBonuses / staff.length) : 0,
        avgPenalties: staff.length ? Math.round(totalPenalties / staff.length) : 0,
        avgPayout: staff.length ? Math.round(totalPayout / staff.length) : 0
      },
      format: 'pdf',
      status: 'completed',
      createdBy: staff[0]?._id || new mongoose.Types.ObjectId()
    };
    
    const report = new Report(reportData);
    await report.save();
    console.log(`üìä –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ ${currentMonth}`);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await mongoose.connection.close();
    console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
populatePayrollAndReportsData();