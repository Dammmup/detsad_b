import mongoose from 'mongoose';
import User from '../entities/users/model';
import Payroll from '../entities/payroll/model';
import Report from '../entities/reports/model';
import dotenv from 'dotenv';

dotenv.config();

const populatePayrollData = async () => {
  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    const mongoURI = process.env.MONGODB_URI || 'mongodb://localhost:27017/kindergarten';
    await mongoose.connect(mongoURI);
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö');

    // –£–¥–∞–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    await Payroll.deleteMany({});
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω—ã —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–∞–Ω–Ω—ã–µ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ');

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ —Å —Ç–∏–ø–æ–º adult
    const staff = await User.find({ type: 'adult' });
    console.log(`üë• –ù–∞–π–¥–µ–Ω–æ ${staff.length} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤`);

    // –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const currentMonth = new Date().toISOString().slice(0, 7); // YYYY-MM

    // –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
    const baseSalary = 150000;
    for (const employee of staff) {
      // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π, –ø—Ä–µ–º–∏–π –∏ —à—Ç—Ä–∞—Ñ–æ–≤
      const accruals = baseSalary + Math.floor(Math.random() * 50000); // 150000-200000
      const bonuses = Math.floor(Math.random() * 50000); // 0-50000
      const penalties = Math.floor(Math.random() * 30000); // 0-3000
      const total = accruals + bonuses - penalties;
      
      const payrollData = new Payroll({
        staffId: employee._id,
        month: currentMonth,
        accruals,
        bonuses,
        penalties,
        deductions: 0,
        total,
        status: ['draft', 'approved', 'paid'][Math.floor(Math.random() * 3)],
        history: [{
          date: new Date(),
          action: '–°–æ–∑–¥–∞–Ω —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç',
          amount: total,
          comment: '–§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å –±–æ–Ω—É—Å–∞–º–∏ –∏ —à—Ç—Ä–∞—Ñ–∞–º–∏'
        }]
      });

      await payrollData.save();
      console.log(`üí∞ –°–æ–∑–¥–∞–Ω —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è ${employee.fullName}`);
    }

    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${staff.length} –∑–∞–ø–∏—Å–µ–π –æ –∑–∞—Ä–ø–ª–∞—Ç–µ`);
    
    // –°–æ–∑–¥–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
    // –ü–æ–¥—Å—á–µ—Ç –∞–≥—Ä–µ–≥–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞
    let totalAccruals = 0;
    let totalBonuses = 0;
    let totalPenalties = 0;
    let totalPayout = 0;
    
    for (const employee of staff) {
      const accruals = baseSalary + Math.floor(Math.random() * 50000);
      const bonuses = Math.floor(Math.random() * 50000);
      const penalties = Math.floor(Math.random() * 30000);
      const total = accruals + bonuses - penalties;
      
      totalAccruals += accruals;
      totalBonuses += bonuses;
      totalPenalties += penalties;
      totalPayout += total;
    }
    
    const reportData = {
      title: `–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ ${currentMonth}`,
      type: 'salary',
      description: `–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ ${currentMonth}`,
      dateRange: {
        startDate: new Date(`${currentMonth}-01`),
        endDate: new Date(`${currentMonth}-${new Date(new Date().getFullYear(), new Date().getMonth() + 1, 0).getDate()}`)
      },
      data: {
        totalEmployees: staff.length,
        totalAccruals,
        totalBonuses,
        totalPenalties,
        totalPayout,
        avgAccruals: staff.length ? Math.round(totalAccruals / staff.length) : 0,
        avgBonuses: staff.length ? Math.round(totalBonuses / staff.length) : 0,
        avgPenalties: staff.length ? Math.round(totalPenalties / staff.length) : 0,
        avgPayout: staff.length ? Math.round(totalPayout / staff.length) : 0
      },
      format: 'pdf',
      status: 'completed',
      createdBy: staff[0]?._id || new mongoose.Types.ObjectId()
    };
    
    const report = new Report(reportData);
    await report.save();
    console.log(`üìä –°–æ–∑–¥–∞–Ω –æ—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–µ –∑–∞ ${currentMonth}`);
    
    // –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await mongoose.connection.close();
    console.log('üîí –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞—Ä–ø–ª–∞—Ç–µ:', error);
    process.exit(1);
  }
};

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
populatePayrollData();