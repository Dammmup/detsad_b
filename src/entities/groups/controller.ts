import { Request, Response } from 'express';
import { GroupService } from './service';

const groupService = new GroupService();

export const getAllGroups = async (req: Request, res: Response) => {
  try {
    // Admin sees all groups, teachers see only their groups
    const filter = req.user?.role === 'admin' ? undefined : req.user?.id;
    const groups = await groupService.getAll(filter, req.user?.role);
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º populate teacher, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –º–æ–¥–µ–ª—å—é
    console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:', groups.length, '–≥—Ä—É–ø–ø(—ã)');
    
    res.json(groups);
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error';
    console.error('Error in GET /groups:', errorMessage);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø',
      details: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    });
  }
};

export const getGroupById = async (req: Request, res: Response) => {
  try {
    const group = await groupService.getById(req.params.id);
    
    if (!group) {
      return res.status(404).json({ error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–ø–ø–∞:', group.name);
    
    res.json(group);
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error';
    console.error(`Error in GET /groups/${req.params.id}:`, errorMessage);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã',
      details: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    });
  }
};

export const createGroup = async (req: Request, res: Response) => {
  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', req.body);
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user);
    
    const group = await groupService.create(req.body, req.user?.id as string);
    
    console.log('‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', group.name);
    res.status(201).json(group);
    
  } catch (err) {
    const error = err as Error;
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error.message);
    res.status(400).json({ error: error.message });
  }
};

export const updateGroup = async (req: Request, res: Response) => {
  try {
    const group = await groupService.getById(req.params.id);
    if (!group) {
      return res.status(404).json({ error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã)
    if (req.user?.role !== 'admin' && group.createdBy.toString() !== req.user?.id) {
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã' });
    }

    const updatedGroup = await groupService.update(req.params.id, req.body);
    
    res.json(updatedGroup);
  } catch (err) {
    const error = err as Error;
    res.status(400).json({ error: error.message });
  }
};

export const deleteGroup = async (req: Request, res: Response) => {
  try {
    const group = await groupService.getById(req.params.id);
    if (!group) {
      return res.status(404).json({ error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã)
    if (
      req.user?.role !== 'admin' &&
      (!group.createdBy || group.createdBy.toString() !== req.user?.id)
    ) {
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã' });
    }

    const result = await groupService.delete(req.params.id);
    if (result) {
      res.json({ message: '–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
    } else {
      res.status(50).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø—ã' });
    }
 } catch (err) {
    const error = err as Error;
    res.status(500).json({ error: error.message });
  }
};