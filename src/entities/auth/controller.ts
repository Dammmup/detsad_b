import { Request, Response } from 'express';
import { AuthService } from './service';

const authService = new AuthService();

export const login = async (req: Request, res: Response) => {
  const { phone, password } = req.body;
  console.log('login:', phone, password);
  try {
    const result = await authService.login(phone, password);
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞ –≤ httpOnly cookie
    res.cookie('auth_token', result.token, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production', // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º secure –≤ true –¥–ª—è production
      sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax', // –ò—Å–ø–æ–ª—å–∑—É–µ–º 'none' –¥–ª—è production (–º–µ–∂–¥–æ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø), 'lax' –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
      maxAge: 24 * 60 * 60 * 1000 // 24 —á–∞—Å–∞ –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
    });
    
    res.json(result);
  } catch (err) {
    console.error('Login error:', err);
    res.status(500).json({ error: err instanceof Error ? err.message : 'Server error' });
  }
};

export const validateToken = async (req: Request, res: Response) => {
  const token = req.cookies.auth_token; // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie
  
  try {
    const result = await authService.validateToken(token);
    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(401).json({ error: error instanceof Error ? error.message : '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
 }
};

export const logout = async (req: Request, res: Response) => {
  try {
    console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    
    // –£–¥–∞–ª—è–µ–º —Ç–æ–∫–µ–Ω –∏–∑ cookie
    res.clearCookie('auth_token', {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax'
    });
    
    const result = await authService.logout();
    res.json(result);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
};