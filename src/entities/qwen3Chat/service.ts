import axios from 'axios';
import { Qwen3Request, Qwen3Response } from './model';
import fs from 'fs';
import path from 'path';
import { sendMessage } from './controller';
import FormData from 'form-data';
import { UIStateService } from '../uiState/service';

const QWEN3_API_URL = process.env.QWEN3_API_URL || 'https://dashscope-intl.aliyuncs.com/compatible-mode/v1/chat/completions';
const QWEN3_API_KEY = process.env.QWEN3_API_KEY || 'sk-5aeb0fdc7fa446c391b6d51363102e79';

export class Qwen3ChatService {
  static async sendMessage(request: Qwen3Request): Promise<Qwen3Response> {
    if (!QWEN3_API_KEY) {
      throw new Error('API –∫–ª—é—á –¥–ª—è Qwen3 –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ');
    }

    try {
      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã –∏–∑ —Ñ–∞–π–ª–æ–≤
      const promptPath = path.join(__dirname, 'assistant-prompt.md');
      const dataAccessPromptPath = path.join(__dirname, 'data-access-prompt.md');
      
      const systemPrompt = fs.readFileSync(promptPath, 'utf-8');
      const dataAccessPrompt = fs.readFileSync(dataAccessPromptPath, 'utf-8');
      
      // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç—ã
      const combinedSystemPrompt = `${systemPrompt}\n\n${dataAccessPrompt}`;
      
      // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —É—á–µ—Ç–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
      // –ü–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI –¥–ª—è —Ç–µ–∫—É—â–µ–π —Å–µ—Å—Å–∏–∏, –µ—Å–ª–∏ –æ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω–æ
      let uiContext = '';
      if (request.sessionId) {
        try {
          const lastUIState = await UIStateService.getLastUIState(request.sessionId);
          if (lastUIState) {
            uiContext = `\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:\n- –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞: ${lastUIState.route}\n- URL: ${lastUIState.url}\n- –í–∏–¥–∏–º—ã–π —Ç–µ–∫—Å—Ç (—á–∞—Å—Ç–∏—á–Ω–æ): ${lastUIState.visibleText?.substring(0, 200)}...\n- –û–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏: ${lastUIState.errors.length > 0 ? lastUIState.errors.join(', ') : '–Ω–µ—Ç'}\n- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ DOM: ${lastUIState.domSnapshot ? (lastUIState.domSnapshot as any).elementCount : '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
          }
        } catch (error) {
          console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ UI:', error);
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É –±–µ–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ UI
        }
      }
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –¥–æ–±–∞–≤–ª—è—è –∫–æ–Ω—Ç–µ–∫—Å—Ç UI
      const enhancedSystemPrompt = combinedSystemPrompt + uiContext;
      
      const messages = [
        { role: 'system', content: enhancedSystemPrompt },
        ...request.messages.map(msg => {
          if (msg.sender === 'user') {
            if (request.image) {
              // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, —Å–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º
              return {
                role: 'user',
                content: [
                  { type: 'text', text: msg.text },
                  {
                    type: 'image_url',
                    image_url: {
                      url: `data:${request.image.mimetype};base64,${request.image.buffer.toString('base64')}`
                    }
                  }
                ]
              };
            } else {
              // –ï—Å–ª–∏ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –æ–±—ã—á–Ω–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
              return {
                role: 'user',
                content: msg.text
              };
            }
          } else {
            return {
              role: 'assistant',
              content: msg.text
            };
          }
        })
      ];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å multipart –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
      if (request.image) {
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º form-data –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const formData = new FormData();
        
        // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –∫–∞–∫ JSON
        formData.append('model', request.model || 'qwen-vl-max');
        formData.append('messages', JSON.stringify(messages));
        
        const response = await axios.post(
          QWEN3_API_URL,
          formData,
          {
            headers: {
              ...formData.getHeaders(),
              'Authorization': `Bearer ${QWEN3_API_KEY}`
            }
          }
        );

        return {
          content: response.data.choices?.[0]?.message?.content || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏'
        };
      } else {
        // –î–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π JSON
        const response = await axios.post(
          QWEN3_API_URL,
          {
            model: request.model || 'qwen-plus', // üëà –º–æ–¥–µ–ª—å
            messages: messages // üëà –∏–º–µ–Ω–Ω–æ messages, –Ω–µ input.messages
          },
          {
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${QWEN3_API_KEY}`
            }
          }
        );

        return {
          content: response.data.choices?.[0]?.message?.content || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏'
        };
      }
    } catch (error: any) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ Qwen3 API:', error.response?.data || error.message);
      throw new Error(`Qwen3 API error: ${JSON.stringify(error.response?.data || error.message)}`);
    }
  }
}
