import mongoose, { Connection, Model, Schema } from 'mongoose';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
export interface IDatabaseConnections {
  default: Connection;
  medical: Connection;
  food: Connection;
}

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π
let connections: IDatabaseConnections | null = null;

const DATABASE_URIS = {
  default: process.env.MONGO_URI || 'mongodb+srv://damir:damir@cluster0.ku60i6n.mongodb.net/test?retryWrites=true&w=majority&appName=Cluster0',
  medical: process.env.MEDICAL_MONGO_URI || 'mongodb+srv://damir:damir@cluster0.ku60i6n.mongodb.net/medician_journals?retryWrites=true&w=majority&appName=Cluster0',
  food: process.env.FOOD_MONGO_URI || 'mongodb+srv://damir:damir@cluster0.ku60i6n.mongodb.net/food_journals?retryWrites=true&w=majority&appName=Cluster0',
};


/**
 * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–æ –≤—Å–µ–º –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
 */
export const connectDatabases = async (): Promise<IDatabaseConnections> => {
  if (connections) {
    return connections;
 }

  try {
    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (default)
    const defaultConnection = await mongoose.createConnection(DATABASE_URIS.default).asPromise();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (test)');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤
    const medicalConnection = await mongoose.createConnection(DATABASE_URIS.medical).asPromise();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ (medician_journals)');

    // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ –ø–æ –ø–∏—Ç–∞–Ω–∏—é
    const foodConnection = await mongoose.createConnection(DATABASE_URIS.food).asPromise();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∂—É—Ä–Ω–∞–ª–æ–≤ –ø–æ –ø–∏—Ç–∞–Ω–∏—é (food_journals)');

    connections = {
      default: defaultConnection,
      medical: medicalConnection,
      food: foodConnection,
    };

    return connections;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö:', error);
    throw error;
 }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export const getConnection = (database: keyof IDatabaseConnections): Connection => {
  if (!connections) {
    throw new Error('–ë–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã. –í—ã–∑–æ–≤–∏—Ç–µ connectDatabases() —Å–Ω–∞—á–∞–ª–∞.');
  }
  return connections[database];
};

/**
 * –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–±—Ä–∏–∫–∏ –º–æ–¥–µ–ª–∏ —Å –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
 * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –º–æ–¥–µ–ª–∏ –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
 */
export const createModelFactory = <T>(
  modelName: string,
  schema: Schema,
  collectionName: string,
  database: keyof IDatabaseConnections
): (() => Model<T>) => {
  return () => {
    const connection = getConnection(database);
    return connection.model<T>(modelName, schema, collectionName);
  };
};

/**
 * –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
 */
export const disconnectDatabases = async (): Promise<void> => {
  if (connections) {
    await Promise.all([
      connections.default.close(),
      connections.medical.close(),
      connections.food.close(),
    ]);
    connections = null;
    console.log('üîí –í—Å–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç—ã');
  }
};