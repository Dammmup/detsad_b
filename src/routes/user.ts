import express, { Response, Request } from 'express';
import User, { IFine, IUser } from '../models/Users';
import bcrypt from 'bcryptjs';
import { AuthenticatedRequest } from '../types/express';

const router = express.Router();

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ (6 —Å–∏–º–≤–æ–ª–æ–≤: –±—É–∫–≤—ã + —Ü–∏—Ñ—Ä—ã)
 */
function generatePersonalCode(): string {
  const chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
  let result = '';
  for (let i = 0; i < 6; i++) {
    result += chars.charAt(Math.floor(Math.random() * chars.length));
  }
  return result;
}

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞
 */
async function generateUniquePersonalCode(): Promise<string> {
  let attempts = 0;
  const maxAttempts = 10;
  
  while (attempts < maxAttempts) {
    const code = generatePersonalCode();
    const existingUser = await User.findOne({ personalCode: code });
    
    if (!existingUser) {
      return code;
    }
    
    attempts++;
  }
  
  throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥');
}

// Get available user roles
router.get('/roles', (req, res) => {
  try {
    const roles = [
      { id: 'admin', name: '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä' },
      { id: 'teacher', name: '–í–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—å' },
      { id: 'assistant', name: '–ü–æ–º–æ—â–Ω–∏–∫ –≤–æ—Å–ø–∏—Ç–∞—Ç–µ–ª—è' },
      { id: 'nurse', name: '–ú–µ–¥—Å–µ—Å—Ç—Ä–∞' },
      { id: 'cook', name: '–ü–æ–≤–∞—Ä' },
      { id: 'cleaner', name: '–£–±–æ—Ä—â–∏—Ü–∞' },
      { id: 'security', name: '–û—Ö—Ä–∞–Ω–Ω–∏–∫' },
      { id: 'psychologist', name: '–ü—Å–∏—Ö–æ–ª–æ–≥' },
      { id: 'music_teacher', name: '–ú—É–∑—ã–∫–∞–ª—å–Ω—ã–π —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å' },
      { id: 'physical_teacher', name: '–ò–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–æ —Ñ–∏–∑–∫—É–ª—å—Ç—É—Ä–µ' },
      { id: 'staff', name: '–ü–µ—Ä—Å–æ–Ω–∞–ª' }
    ];
    res.json(roles);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Ä–æ–ª–µ–π' });
  }
});

router.get('/', async (req, res) => {
  try {
    const users = await User.find({ role: { $ne: 'admin' } }, '-passwordHash');
    res.json(users);
  } catch (err) {
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


router.post('/', async (req, res) => {
  try {
    // –õ–æ–≥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('POST /users req.body:', req.body);

    // –í–∞–ª–∏–¥–∞—Ü–∏—è
    const { type = 'adult' } = req.body;
    let requiredFields: string[] = ['fullName'];

    if (type === 'adult') {
      requiredFields.push('phone', 'role', 'active');
    }
    if (type === 'child') {
      requiredFields.push('iin', 'groupId', 'parentPhone', 'parentName');
    }

    // –î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π:');
    requiredFields.forEach(field => {
      const val = req.body[field];
      console.log(`${field}:`, val, typeof val, val === undefined, val === null, typeof val === 'string' && val.trim().length === 0);
    });

    const missingFields = requiredFields.filter(field => {
      const val = req.body[field];
      // –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
      if (val === undefined || val === null) return true;
      if (typeof val === 'string' && val.trim().length === 0) return true;
      if (typeof val === 'number' && isNaN(val)) return true;
      return false;
    });

    if (missingFields.length > 0) {
      return res.status(400).json({
        error: '–ù–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è',
        missingFields
      });
    }

    // –ó–¥–µ—Å—å req.body —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ –Ω—É–∂–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    // –ù–∞–ø—Ä–∏–º–µ—Ä:
    // const newUser = new UserModel(req.body);
    // await newUser.save();

    const userData: any = {
      ...req.body,
      uniqNumber: req.body.iin || `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`, // –ò–ò–ù –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
      createdAt: new Date()
    };

    // Add groupId if provided
    if (req.body.groupId) {
      userData.groupId = req.body.groupId;
    }

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
    if (type === 'adult') {
      try {
        userData.personalCode = await generateUniquePersonalCode();
        console.log('üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', userData.personalCode);
      } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞:', error);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞' });
      }
    }

    console.log('userData –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º:', userData);
    
    const user = new User(userData);
    await user.save();
    
    // –ò—Å–∫–ª—é—á–∞–µ–º passwordHash –∏–∑ –æ—Ç–≤–µ—Ç–∞
    const userObj = user.toObject();
    delete (userObj as any).passwordHash;
    
    // –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ
    if (type === 'adult' && userData.personalCode) {
      console.log(`‚úÖ –°–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å–æ–∑–¥–∞–Ω: ${userData.fullName}, –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥: ${userData.personalCode}`);
    }
    
    res.status(201).json(userObj);
  } catch (err: any) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    
    if (err.code === 11000) {
      // –õ–æ–≥–∏—Ä—É–µ–º –¥–µ—Ç–∞–ª–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞
      console.error('–ö–æ–Ω—Ñ–ª–∏–∫—Ç —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞:', {
        code: err.code,
        keyPattern: err.keyPattern,
        keyValue: err.keyValue,
        message: err.message
      });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–µ –ø–æ–ª–µ –≤—ã–∑—ã–≤–∞–µ—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç
      let conflictField = '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –ø–æ–ª–µ';
      if (err.keyPattern && err.keyPattern.phone) {
        conflictField = '–Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞';
      } else if (err.keyPattern && err.keyPattern.email) {
        conflictField = 'email';
      } else if (err.keyPattern && err.keyPattern.username) {
        conflictField = '–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è';
      }
      
      return res.status(409).json({ 
        error: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ${conflictField} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`,
        conflictField: err.keyPattern,
        conflictValue: err.keyValue
      });
    }
    res.status(500).json({ error: err.message || '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id
router.get('/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id, '-passwordHash');
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json(user);
  } catch (err) {
    res.status(400).json({ error: 'Invalid id format' });
  }
});


router.put('/:id', async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–æ–∫
    if (req.body.notes !== undefined) {
      user.notes = req.body.notes;
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 
    if (req.body.active !== undefined) {
      user.active = req.body.active;
    }

    if (req.body.iin !== undefined) {
      user.iin = req.body.iin;
    }

    await user.save();
    // –∏—Å–∫–ª—é—á–∞–µ–º passwordHash
    const userObj = user.toObject();
    delete (userObj as any).passwordHash;
    res.json(userObj);
  } catch (err) {
    res.status(500).json({ error: 'Error updating user' });
  }
});

// Update user salary
router.put('/:id/salary', async (req, res) => {
  try {
    const user = await User.findById(req.params.id);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    user.salary = req.body.salary;
    await user.save();
    console.log('Updated user salary:', user, req.body.salary);
    res.json(user);
  } catch (err) {
    res.status(500).json({ error: 'Error updating user salary' });
  }
});

// Add a fine to user
router.post<{ id: string }, any, { amount: number; reason: string; type?: string; notes?: string }>('/:id/fines', async (req: Request, res: Response) => {
  try {
    if (!req.user) {
      return res.status(401).json({ error: 'Authentication required' });
    }
    const authReq = req as AuthenticatedRequest;
    const { amount, reason, type = 'other', notes } = req.body;
    const userId = req.params.id;
    const createdBy = authReq.user.id; // Now we know user is defined

    if (!amount || !reason) {
      return res.status(400).json({ error: 'Amount and reason are required' });
    }

    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    const newFine = {
      amount: Number(amount),
      reason,
      type,
      notes,
      createdBy,
      approved: true, // Auto-approve for now, can be changed
      date: new Date()
    };

    user.fines.push(newFine as any);
    user.totalFines = (user.totalFines || 0) + Number(amount);
    await user.save();

    res.status(201).json(newFine);
  } catch (error) {
    console.error('Error adding fine:', error);
    res.status(500).json({ error: 'Error adding fine' });
  }
});

// Get all fines for a user
router.get<{ id: string }>('/:id/fines', async (req: Request, res: Response) => {
  try {
    const user = await User.findById(req.params.id, 'fines totalFines')
      .populate('fines.createdBy', 'firstName lastName')
      .lean();
    
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    res.json({
      fines: user.fines,
      totalFines: user.totalFines || 0
    });
  } catch (error) {
    console.error('Error getting fines:', error);
    res.status(500).json({ error: 'Error getting fines' });
  }
});

// Remove a fine
router.delete('/:userId/fines/:fineId', async (req, res) => {
  try {
    const { userId, fineId } = req.params;
    
    const user = await User.findById(userId);
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }

    const fineIndex = user.fines.findIndex((f: any) => f._id && f._id.toString() === fineId);
    if (fineIndex === -1) {
      return res.status(404).json({ error: 'Fine not found' });
    }

    const [removedFine] = user.fines.splice(fineIndex, 1);
    user.totalFines = Math.max(0, (user.totalFines || 0) - (removedFine.amount || 0));
    await user.save();

    res.json({ message: 'Fine removed successfully' });
  } catch (error) {
    console.error('Error removing fine:', error);
    res.status(500).json({ error: 'Error removing fine' });
  }
});

// Calculate total fines for a user
router.get('/:id/fines/total', async (req, res) => {
  try {
    const user = await User.findById(req.params.id, 'totalFines');
    if (!user) {
      return res.status(404).json({ error: 'User not found' });
    }
    res.json({ totalFines: user.totalFines || 0 });
  } catch (error) {
    console.error('Error calculating total fines:', error);
    res.status(500).json({ error: 'Error calculating total fines' });
  }
});
export default router;
