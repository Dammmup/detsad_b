import express from 'express';
import Payroll from '../models/Payroll';
import { createObjectCsvStringifier } from 'csv-writer';
import ExcelJS from 'exceljs';
import path from 'path';
import fs from 'fs';
import { authMiddleware } from '../middlewares/authMiddleware';
import { requireRole } from '../middlewares/auth';

const router = express.Router();

// GET /payroll ‚Äî —Å–ø–∏—Å–æ–∫ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤ (—Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏)
router.get('/', authMiddleware, async (req, res) => {
  try {
    console.log('üîç –ó–∞–ø—Ä–æ—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤:', req.query);
    const { staffId, month } = req.query;
    const user = (req as any).user;
    
    // –§–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const filter: any = {};
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–Ω –º–æ–∂–µ—Ç –≤–∏–¥–µ—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    if (user.role !== 'admin') {
      filter.staffId = user._id;
    } else {
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ staffId
      if (staffId) filter.staffId = staffId;
    }
    
    // –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É
    if (month) filter.month = month;
    
    console.log('üîç –§–∏–ª—å—Ç—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤:', filter);
    const data = await Payroll.find(filter).populate({ path: 'staffId', select: 'fullName role email', model: 'users' });
    console.log('üîç –ù–∞–π–¥–µ–Ω–æ —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤:', data.length);
    
    res.json({ success: true, data });
  } catch (e) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤:', e);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω—ã—Ö –ª–∏—Å—Ç–æ–≤', error: e });
  }
});

// POST /payroll ‚Äî —Å–æ–∑–¥–∞—Ç—å —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç
router.post('/', authMiddleware, requireRole(['admin']), async (req, res) => {
  try {
    const payroll = new Payroll(req.body);
    await payroll.save();
    res.status(201).json({ success: true, data: payroll });
  } catch (e) {
    res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞', error: e });
  }
});

// PUT /payroll/:id ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç
router.put('/:id', authMiddleware, requireRole(['admin']), async (req, res) => {
  try {
    const updated = await Payroll.findByIdAndUpdate(req.params.id, req.body, { new: true });
    res.json({ success: true, data: updated });
  } catch (e) {
    res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞', error: e });
  }
});

// DELETE /payroll/:id ‚Äî —É–¥–∞–ª–∏—Ç—å —Ä–∞—Å—á–µ—Ç–Ω—ã–π –ª–∏—Å—Ç
router.delete('/:id', authMiddleware, requireRole(['admin']), async (req, res) => {
  try {
    await Payroll.findByIdAndDelete(req.params.id);
    res.json({ success: true });
  } catch (e) {
    res.status(400).json({ success: false, message: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–∞—Å—á–µ—Ç–Ω–æ–≥–æ –ª–∏—Å—Ç–∞', error: e });
  }
});

// POST /payroll/export ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º
router.post('/export', authMiddleware, async (req, res) => {
  try {
    const { format, startDate, endDate, staffId } = req.body;
    const user = (req as any).user;
    
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    const filter: any = {};
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, –æ–Ω –º–æ–∂–µ—Ç —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ
    if (user.role !== 'admin') {
      filter.staffId = user._id;
    } else {
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ staffId
      if (staffId) filter.staffId = staffId;
    }
    
    if (startDate && endDate) {
      const startMonth = String(startDate).slice(0, 7);
      const endMonth = String(endDate).slice(0, 7);
      filter.month = { $gte: startMonth, $lte: endMonth };
    }
    
    // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    const payrolls = await Payroll.find(filter).populate({ path: 'staffId', select: 'fullName role email', model: 'users' });
    
    if (format === 'csv') {
      // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
      const csvWriter = createObjectCsvStringifier({
        header: [
          { id: 'staffName', title: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫' },
          { id: 'month', title: '–ú–µ—Å—è—Ü' },
          { id: 'accruals', title: '–ù–∞—á–∏—Å–ª–µ–Ω–∏—è' },
          { id: 'penalties', title: '–®—Ç—Ä–∞—Ñ—ã' },
          { id: 'total', title: '–ò—Ç–æ–≥–æ' }
        ]
      });
      
      const records = payrolls.map(payroll => ({
        staffName: (payroll.staffId as any)?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
        month: payroll.month,
        accruals: payroll.accruals,
        bonuses: payroll.bonuses,
        penalties: payroll.penalties,
        total: payroll.total
      }));
      
      const csvContent = csvWriter.getHeaderString() + csvWriter.stringifyRecords(records);
      
      res.header('Content-Type', 'text/csv');
      res.attachment('salary_report.csv');
      return res.send(csvContent);
    } else if (format === 'excel') {
      // –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet('–û—Ç—á–µ—Ç –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º');
      
      // –ó–∞–≥–æ–ª–æ–≤–∫–∏
      worksheet.columns = [
        { header: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫', key: 'staffName', width: 30 },
        { header: '–ú–µ—Å—è—Ü', key: 'month', width: 15 },
        { header: '–ù–∞—á–∏—Å–ª–µ–Ω–∏—è', key: 'accruals', width: 15 },
        { header: '–®—Ç—Ä–∞—Ñ—ã', key: 'penalties', width: 15 },
        { header: '–ò—Ç–æ–≥–æ', key: 'total', width: 15 }
      ];
      
      // –î–∞–Ω–Ω—ã–µ
      payrolls.forEach(payroll => {
        worksheet.addRow({
          staffName: (payroll.staffId as any)?.fullName || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ',
          month: payroll.month,
          accruals: payroll.accruals,
          bonuses: payroll.bonuses,
          penalties: payroll.penalties,
          total: payroll.total
        });
      });
      
      // –°–æ–∑–¥–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
      const tempFilePath = path.join(__dirname, `../temp/salary_report_${Date.now()}.xlsx`);
      
      // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      const tempDir = path.dirname(tempFilePath);
      if (!fs.existsSync(tempDir)) {
        fs.mkdirSync(tempDir, { recursive: true });
      }
      
      await workbook.xlsx.writeFile(tempFilePath);
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
      res.download(tempFilePath, 'salary_report.xlsx', (err) => {
        // –£–¥–∞–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        if (fs.existsSync(tempFilePath)) {
          fs.unlinkSync(tempFilePath);
        }
        
        if (err) {
          console.error('Error sending file:', err);
        }
      });
    } else {
      // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º JSON
      res.json({ success: true, data: payrolls });
    }
  } catch (e) {
    console.error('Error exporting payroll report:', e);
    res.status(500).json({ success: false, message: '–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ –∑–∞—Ä–ø–ª–∞—Ç–∞–º', error: e });
  }
});

export default router;
