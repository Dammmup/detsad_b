import express from 'express';
import Group from '../models/Group';
import { authorizeRole } from '../middlewares/authRole';

const router = express.Router();

// Get all groups
router.get('/', async (req, res) => {
  try {
    // First, try to find groups without populating
    let groups = await Group.find();
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º populate teacher, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫ —Å –º–æ–¥–µ–ª—å—é
    // TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å populate –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    console.log('üìã –ó–∞–≥—Ä—É–∂–µ–Ω —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:', groups.length, '–≥—Ä—É–ø–ø(—ã)');
    
    // groups = await Promise.all(groups.map(async (group) => {
    //   if (group.teacher) {
    //     try {
    //       await group.populate('teacher', 'fullName');
    //     } catch (populateError) {
    //       console.error('Error populating teacher:', populateError);
    //       // If population fails, keep the original teacher ID
    //     }
    //   }
    //   return group;
    // }));
    
    res.json(groups);
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error';
    console.error('Error in GET /groups:', errorMessage);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø',
      details: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    });
  }
});

// Get single group by ID
router.get('/:id', async (req, res) => {
  try {
    // First, try to find the group without populating
    const group = await Group.findById(req.params.id);
    
    if (!group) {
      return res.status(404).json({ error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º populate teacher –¥–ª—è –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã
    // TODO: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å populate –∫–æ–≥–¥–∞ –º–æ–¥–µ–ª–∏ –±—É–¥—É—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
    console.log('üìÑ –ó–∞–≥—Ä—É–∂–µ–Ω–∞ –≥—Ä—É–ø–ø–∞:', group.name);
    
    // if (group.teacher) {
    //   try {
    //     await group.populate('teacher', 'fullName');
    //   } catch (populateError) {
    //     console.error('Error populating teacher:', populateError);
    //     // If population fails, keep the original teacher ID
    //   }
    // }
    
    res.json(group);
  } catch (err: unknown) {
    const errorMessage = err instanceof Error ? err.message : 'Unknown error';
    console.error(`Error in GET /groups/${req.params.id}:`, errorMessage);
    res.status(500).json({ 
      error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø—ã',
      details: process.env.NODE_ENV === 'development' ? errorMessage : undefined
    });
  }
});

// Create new group (admin, teacher)
router.post('/', authorizeRole(['admin', 'teacher']), async (req: any, res) => {
  try {
    console.log('üì• –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã:', req.body);
    console.log('üë§ –¢–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user);
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
    const groupData = {
      name: req.body.name,
      description: req.body.description || '',
      maxStudents: req.body.maxStudents || 20,
      ageGroup: req.body.ageGroup,
      isActive: req.body.isActive !== false, // –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é true
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞–∑–Ω–∞—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ teacher
      teacher: req.body.teacher === 'auto' || !req.body.teacher ? req.user.id : req.body.teacher,
      createdBy: req.user.id,
    };
    
    console.log('üì§ –°–æ–∑–¥–∞—é –≥—Ä—É–ø–ø—É —Å –¥–∞–Ω–Ω—ã–º–∏:', groupData);
    
    const group = new Group(groupData);
    await group.save();
    
    console.log('‚úÖ –ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞:', group.name);
    res.status(201).json(group);
    
  } catch (err) {
    const error = err as Error;
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã:', error.message);
    res.status(400).json({ error: error.message });
  }
});

// Update group (admin, teacher)
router.put('/:id', authorizeRole(['admin', 'teacher']), async (req: any, res) => {
  try {
    const group = await Group.findById(req.params.id);
    if (!group) {
      return res.status(404).json({ error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã)
    if (req.user.role !== 'admin' && group.createdBy.toString() !== req.user.id) {
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã' });
    }

    const updatedGroup = await Group.findByIdAndUpdate(
      req.params.id,
      { $set: req.body },
      { new: true }
    );
    
    res.json(updatedGroup);
  } catch (err) {
    const error = err as Error;
    res.status(400).json({ error: error.message });
  }
});

// Delete group (admin, teacher)
router.delete('/:id', authorizeRole(['admin', 'teacher']), async (req: any, res) => {
  try {
    const group = await Group.findById(req.params.id);
    if (!group) {
      return res.status(404).json({ error: '–ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ (—Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã)
    if (
      req.user.role !== 'admin' &&
      (!group.createdBy || group.createdBy.toString() !== req.user.id)
    ) {
      return res.status(403).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≥—Ä—É–ø–ø—ã' });
    }

    await Group.findByIdAndDelete(req.params.id);
    res.json({ message: '–ì—Ä—É–ø–ø–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    const error = err as Error;
    res.status(500).json({ error: error.message });
  }
});

export default router;
