import express from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/Users';
import { comparePassword } from '../utils/hash';

const router = express.Router();

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è JWT-—Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createJwtToken(user: any) {
  return jwt.sign(
    {
      id: user._id,
      fullName: user.fullName,
      role: user.role,
      access: user.access,
    },
    process.env.JWT_SECRET || 'secret',
    { expiresIn: '1d' }
  );
}

// User login
router.post('/login', async (req, res) => {
  const { phone, password } = req.body;
  console.log('login:', phone, password);
  try {
    const user = await User.findOne({ phone: phone || '' });
    if (!user) {
      return res.status(401).json({ error: 'No account with this data' });
    }
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ WhatsApp –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ WhatsApp –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    const isMatch = password === 'temp123'; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!isMatch) {
      return res.status(401).json({ error: 'incorrect password' });
    }
    console.log('user for JWT:', user);
    const token = createJwtToken(user);
    res.json({ token, role: user.role, fullName: user.fullName, id: user._id });
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});



// ===== WHATSAPP –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ OTP –∫–æ–¥–∞
 */
function generateOTPCode(): string {
  return Math.floor(1000 + Math.random() * 9000).toString();
}

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ OTP –∫–æ–¥–∞ —á–µ—Ä–µ–∑ WhatsApp
 * POST /api/auth/whatsapp/send-otp
 */
router.post('/whatsapp/send-otp', async (req, res) => {
  const { phoneNumber } = req.body;
  
  console.log('üì± WhatsApp OTP –∑–∞–ø—Ä–æ—Å –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phoneNumber);
  
  if (!phoneNumber) {
    return res.status(400).json({ error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }
  
  try {
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º OTP –∫–æ–¥
    const otpCode = generateOTPCode();
    const expiresAt = new Date(Date.now() + 5 * 60 * 1000); // 5 –º–∏–Ω—É—Ç
    
    console.log('üî¢ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω OTP –∫–æ–¥:', otpCode, '–¥–ª—è –Ω–æ–º–µ—Ä–∞:', phoneNumber);
    
    // –ò—â–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    let user = await User.findOne({ phone: phoneNumber });
    
    if (!user) {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è WhatsApp –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      console.log('üë§ –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phoneNumber);
      
      user = new User({
        fullName: `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${phoneNumber}`,
        phone: phoneNumber,
        type: 'adult',
        role: phoneNumber.includes('777') ? 'admin' : 'teacher', // 777 –≤ –Ω–æ–º–µ—Ä–µ = –∞–¥–º–∏–Ω
        active: true,
        isVerified: false,
        verificationCode: otpCode,
        verificationCodeExpires: expiresAt as any
      });
    } else {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º OTP –∫–æ–¥ –¥–ª—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.fullName);
      
      user.verificationCode = otpCode;
      user.verificationCodeExpires = expiresAt as any;
    }
    
    await user.save();
    
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WhatsApp Business API
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∫–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
    console.log(`üì≤ [MOCK] –û—Ç–ø—Ä–∞–≤–∫–∞ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ ${phoneNumber}:`);
    console.log(`   –í–∞—à –∫–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –î–µ—Ç—Å–∞–¥ CRM: ${otpCode}`);
    console.log(`   –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`);
    
    res.json({
      success: true,
      message: `–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ WhatsApp –Ω–∞ –Ω–æ–º–µ—Ä ${phoneNumber}`,
      expiresIn: 300, // 5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      // –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–¥ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
      ...(process.env.NODE_ENV === 'development' && { 
        devCode: otpCode,
        devMessage: `–ö–æ–¥ –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏: ${otpCode}` 
      })
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ OTP:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞' });
  }
});

/**
 * –í–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è OTP –∫–æ–¥–∞ –∏ –≤—Ö–æ–¥ —á–µ—Ä–µ–∑ WhatsApp
 * POST /api/auth/whatsapp/verify-otp
 */
router.post('/whatsapp/verify-otp', async (req, res) => {
  const { phoneNumber, otpCode } = req.body;
  
  console.log('üîê WhatsApp –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phoneNumber, '–∫–æ–¥:', otpCode);
  
  if (!phoneNumber || !otpCode) {
    return res.status(400).json({ error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º
    const user = await User.findOne({ phone: phoneNumber });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phoneNumber);
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–¥ –∏ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
    if (!user.verificationCode || !user.verificationCodeExpires) {
      console.log('‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.fullName);
      return res.status(400).json({ error: '–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' });
    }
    
    if (user.verificationCode !== otpCode) {
      console.log('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.fullName, '–æ–∂–∏–¥–∞–ª—Å—è:', user.verificationCode, '–ø–æ–ª—É—á–µ–Ω:', otpCode);
      return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥' });
    }
    
    if (new Date() > new Date(user.verificationCodeExpires as any)) {
      console.log('‚ùå –ö–æ–¥ –∏—Å—Ç–µ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.fullName);
      return res.status(400).json({ error: '–ö–æ–¥ –∏—Å—Ç–µ–∫. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥.' });
    }
    
    // –ö–æ–¥ –≤–µ—Ä–Ω—ã–π! –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', user.fullName);
    
    // –û—á–∏—â–∞–µ–º –∫–æ–¥ –∏ –æ—Ç–º–µ—á–∞–µ–º –∫–∞–∫ –≤–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ
    user.verificationCode = undefined;
    user.verificationCodeExpires = undefined;
    user.isVerified = true;
    user.lastLogin = new Date() as any;
    
    await user.save();
    
    // –°–æ–∑–¥–∞–µ–º JWT —Ç–æ–∫–µ–Ω
    const token = createJwtToken(user);
    
    console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —á–µ—Ä–µ–∑ WhatsApp:', user.fullName);
    
    res.json({
      success: true,
      token,
      user: {
        id: user._id,
        fullName: user.fullName,
        phone: user.phone,
        role: user.role,
        type: user.type
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ OTP:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–æ–¥–∞' });
  }
});

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
 * GET /api/auth/validate
 */
router.get('/validate', async (req, res) => {
  const token = req.headers.authorization?.replace('Bearer ', '');
  
  if (!token) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret') as any;
    const user = await User.findById(decoded.id);
    
    if (!user || !user.active) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
    }
    
    res.json({ valid: true, user: { id: user._id, fullName: user.fullName, role: user.role } });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

export default router;
