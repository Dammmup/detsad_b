import express from 'express';
import jwt from 'jsonwebtoken';
import User from '../models/Users';

const router = express.Router();

// –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è JWT-—Ç–æ–∫–µ–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
function createJwtToken(user: any) {
  const secret = process.env.JWT_SECRET;
  if (!secret) {
    console.error('‚ùå JWT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!');
    throw new Error('Server configuration error');
  }
  return jwt.sign(
    {
      id: user._id,
      fullName: user.fullName,
      role: user.role,
      phone: user.phone,
      iat: Math.floor(Date.now() / 1000)
    },
    secret,
    { expiresIn: '24h' }
  );
}

// User login
router.post('/login', async (req, res) => {
  const { phone, password } = req.body;
  console.log('login:', phone, password);
  try {
    const user = await User.findOne({ phone: phone || '' });
    if (!user) {
      return res.status(401).json({ error: 'No account with this data' });
    }
    // –í—Ä–µ–º–µ–Ω–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –ø–∞—Ä–æ–ª—è, –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ WhatsApp –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è
    // TODO: –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ WhatsApp –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—é
    const isMatch = password === 'temp123'; // –í—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if (!isMatch) {
      return res.status(401).json({ error: 'incorrect password' });
    }
    console.log('user for JWT:', user);
    const token = createJwtToken(user);
    res.json({ token, role: user.role, fullName: user.fullName, id: user._id });
  } catch (err) {
    res.status(500).json({ error: 'Server error' });
  }
});



// ===== WHATSAPP –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø =====

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ 4-–∑–Ω–∞—á–Ω–æ–≥–æ OTP –∫–æ–¥–∞
 */
function generateOTPCode(): string {
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏ —Å—Ç–æ–π–∫–∏–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è production
  const crypto = require('crypto');
  const randomBytes = crypto.randomBytes(2);
  const code = (randomBytes.readUInt16BE(0) % 9000 + 1000).toString();
  return code;
}

// Rate limiting –¥–ª—è WhatsApp OTP
const otpAttempts = new Map<string, { count: number, lastAttempt: number }>();

function checkRateLimit(phoneNumber: string): boolean {
  const now = Date.now();
  const key = phoneNumber;
  const attempt = otpAttempts.get(key);
  
  if (!attempt) {
    otpAttempts.set(key, { count: 1, lastAttempt: now });
    return true;
  }
  
  // –°–±—Ä–æ—Å —Å—á—ë—Ç—á–∏–∫–∞ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
  if (now - attempt.lastAttempt > 15 * 60 * 1000) {
    otpAttempts.set(key, { count: 1, lastAttempt: now });
    return true;
  }
  
  // –ú–∞–∫—Å–∏–º—É–º 3 –ø–æ–ø—ã—Ç–∫–∏ –∑–∞ 15 –º–∏–Ω—É—Ç
  if (attempt.count >= 3) {
    return false;
  }
  
  attempt.count++;
  attempt.lastAttempt = now;
  return true;
}



/**


/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ç–æ–∫–µ–Ω–∞
 * GET /api/auth/validate
 */
router.get('/validate', async (req, res) => {
  const token = req.headers.authorization?.replace('Bearer ', '');
  
  if (!token) {
    return res.status(401).json({ error: '–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω' });
  }
  
  try {
    const decoded = jwt.verify(token, process.env.JWT_SECRET || 'secret') as any;
    const user = await User.findById(decoded.id);
    
    if (!user || !user.active) {
      return res.status(401).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω' });
    }
    
    res.json({ valid: true, user: { id: user._id, fullName: user.fullName, role: user.role } });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞:', error);
    res.status(401).json({ error: '–ù–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω' });
  }
});

// ===== –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ü–û –ü–ï–†–°–û–ù–ê–õ–¨–ù–û–ú–£ –ö–û–î–£ =====

/**
 * –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É
 * POST /api/auth/personal-code
 */
router.post('/personal-code', async (req, res) => {
  const { phoneNumber, personalCode } = req.body;
  
  console.log('üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phoneNumber);
  
  if (!phoneNumber || !personalCode) {
    return res.status(400).json({ error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã' });
  }
  
  try {
    // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –¥–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–º –∫–æ–¥–æ–º
    const user = await User.findOne({ 
      phone: phoneNumber,
    });
    
    if (!user) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –¥–ª—è –Ω–æ–º–µ—Ä–∞:', phoneNumber);
      return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∫–æ–¥' });
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–∫—Ç–∏–≤–µ–Ω
    if (!user.active) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω:', user.fullName);
      return res.status(401).json({ error: '–ê–∫–∫–∞—É–Ω—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.' });
    }
    
    // –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:', user.fullName);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
    user.lastLogin = new Date() as any;
    await user.save();
    
    console.log('üéâ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:', user.fullName);
    
    res.json({
      success: true,
      message: '–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
      user: {
        id: user._id,
        fullName: user.fullName,
        phone: user.phone,
        role: user.role,
        type: user.type
      }
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–º—É –∫–æ–¥—É:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

/**
 * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ –¥–ª—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
 * POST /api/auth/generate-personal-code
 */


/**

// ===== –í–´–•–û–î –ò–ó –°–ò–°–¢–ï–ú–´ =====

/**
 * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (logout)
 * POST /api/auth/logout
 */
router.post('/logout', (req, res) => {
  try {
    console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
    
    // –í JWT-based —Å–∏—Å—Ç–µ–º–µ logout –æ–±—ã—á–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    // (—É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –∏–∑ localStorage)
    // –ó–¥–µ—Å—å –º—ã –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥
    
    res.json({ 
      success: true, 
      message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã' 
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ –∏–∑ —Å–∏—Å—Ç–µ–º—ã:', error);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

export default router;
