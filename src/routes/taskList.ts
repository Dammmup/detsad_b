import express from 'express';
import TaskList from '../models/TaskList';
import User from '../models/Users';
import { authMiddleware } from '../middlewares/authMiddleware';
import { authorizeRole } from '../middlewares/authRole';

const router = express.Router();

// –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
router.get('/', authMiddleware, async (req: any, res) => {
  try {
    console.log('üìã –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á', req.query);
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', req.user.fullName, '–†–æ–ª—å:', req.user.role);

    const { 
      assignedTo, 
      createdBy, 
      completed, 
      priority, 
      category, 
      dueDate,
      search
    } = req.query;

    // –§–∏–ª—å—Ç—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ —Ç–µ–∫—É—â–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    let filter: any = { assignedTo: req.user.id };

    // –†–æ–ª–µ–≤–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è
    if (req.user.role === 'admin') {
      // –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –≤–∏–¥–∏—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏
      filter = {};
      if (assignedTo) filter.assignedTo = assignedTo;
      if (createdBy) filter.createdBy = createdBy;
    } else if (req.user.role === 'teacher' || req.user.role === 'assistant') {
      // –£—á–∏—Ç–µ–ª—è –∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—ã –≤–∏–¥—è—Ç –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –∏–º–∏
      filter.$or = [
        { assignedTo: req.user.id },
        { createdBy: req.user.id }
      ];
    } else {
      // –î—Ä—É–≥–∏–µ —Ä–æ–ª–∏ –≤–∏–¥—è—Ç —Ç–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∏, –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–µ –∏–º
      filter.assignedTo = req.user.id;
    }

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –¥—Ä—É–≥–∏—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    if (completed !== undefined) {
      filter.completed = completed === 'true';
    }
    if (priority) {
      filter.priority = priority;
    }
    if (category) {
      filter.category = category;
    }
    if (dueDate) {
      filter.dueDate = new Date(dueDate as string);
    }
    if (search) {
      filter.title = { $regex: search, $options: 'i' };
    }

    console.log('üîç –ü—Ä–∏–º–µ–Ω–µ–Ω–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä:', filter);

    const tasks = await TaskList.find(filter)
      .populate('assignedTo', 'fullName')
      .populate('createdBy', 'fullName')
      .sort({ createdAt: -1 });

    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞—á`);

    res.json(tasks);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á' });
  }
});

// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É
router.post('/', authMiddleware, async (req: any, res) => {
  try {
    console.log('‚ûï –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏:', req.body);
    console.log('üë§ –°–æ–∑–¥–∞—Ç–µ–ª—å:', req.user.fullName);

    const { 
      title, 
      description, 
      assignedTo, 
      dueDate, 
      priority, 
      category 
    } = req.body;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    if (!title) {
      return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä–æ–º—É –Ω–∞–∑–Ω–∞—á–∞–µ—Ç—Å—è –∑–∞–¥–∞—á–∞, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (assignedTo) {
      const userExists = await User.findById(assignedTo);
      if (!userExists) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
    }

    const newTask = new TaskList({
      title,
      description,
      assignedTo: assignedTo || req.user.id, // –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–∞–∑–Ω–∞—á–∞–µ–º —Å–æ–∑–¥–∞—Ç–µ–ª—é
      createdBy: req.user.id,
      dueDate: dueDate ? new Date(dueDate) : undefined,
      priority: priority || 'medium',
      category
    });

    const savedTask = await newTask.save();
    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞:', savedTask._id);

    // –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–≤—è–∑–∏ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ø–æ–ª–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    const populatedTask = await TaskList.findById(savedTask._id)
      .populate('assignedTo', 'fullName')
      .populate('createdBy', 'fullName');

    res.status(201).json(populatedTask);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞—á–∏' });
 }
});

// –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
router.put('/:id', authMiddleware, async (req: any, res) => {
  try {
    console.log('‚úèÔ∏è –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', req.params.id, req.body);

    const taskId = req.params.id;
    const { title, description, assignedTo, completed, dueDate, priority, category } = req.body;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ –æ–Ω –∞–¥–º–∏–Ω)
    const task = await TaskList.findById(taskId);
    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
    const canEdit = req.user.role === 'admin' || 
                   req.user.id === task.createdBy.toString() ||
                   req.user.id === task.assignedTo?.toString();
    
    if (!canEdit) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏' });
    }

    const updateData: any = {};
    if (title) updateData.title = title;
    if (description !== undefined) updateData.description = description;
    if (assignedTo) {
      const userExists = await User.findById(assignedTo);
      if (!userExists) {
        return res.status(400).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω' });
      }
      updateData.assignedTo = assignedTo;
    }
    if (completed !== undefined) updateData.completed = completed;
    if (dueDate) updateData.dueDate = new Date(dueDate);
    if (priority) updateData.priority = priority;
    if (category) updateData.category = category;

    const updatedTask = await TaskList.findByIdAndUpdate(
      taskId,
      updateData,
      { new: true }
    ).populate('assignedTo', 'fullName').populate('createdBy', 'fullName');

    console.log('‚úÖ –ó–∞–¥–∞—á–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', taskId);

    res.json(updatedTask);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' });
  }
});

// –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É
router.delete('/:id', authMiddleware, async (req: any, res) => {
  try {
    console.log('üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏:', req.params.id);

    const taskId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –∏ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ –æ–Ω –∞–¥–º–∏–Ω)
    const task = await TaskList.findById(taskId);
    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ
    const canDelete = req.user.role === 'admin' || req.user.id === task.createdBy.toString();
    
    if (!canDelete) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏' });
    }

    await TaskList.findByIdAndDelete(taskId);

    console.log('‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞:', taskId);

    res.json({ message: '–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏' });
  }
});

// –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é/–Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
router.patch('/:id/toggle', authMiddleware, async (req: any, res) => {
  try {
    console.log('üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', req.params.id);

    const taskId = req.params.id;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∑–∞–¥–∞—á–∞ –∏ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ –æ–Ω –∞–¥–º–∏–Ω)
    const task = await TaskList.findById(taskId);
    if (!task) {
      return res.status(404).json({ error: '–ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' });
    }

    const canToggle = req.user.role === 'admin' || 
                     req.user.id === task.assignedTo?.toString() ||
                     req.user.id === task.createdBy.toString();
    
    if (!canToggle) {
      return res.status(403).json({ error: '–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏' });
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    task.completed = !task.completed;
    const updatedTask = await task.save();

    console.log('‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –∏–∑–º–µ–Ω–µ–Ω:', taskId, '–í—ã–ø–æ–ª–Ω–µ–Ω–∞:', updatedTask.completed);

    res.json(updatedTask);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏' });
  }
});

export default router;