import nodemailer from 'nodemailer';
import * as XLSX from 'xlsx';
import path from 'path';
import fs from 'fs';

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã
interface EmailConfig {
  to: string[];
  subject: string;
  text: string;
  attachments?: Array<{
    filename: string;
    content: Buffer;
    contentType: string;
  }>;
}

interface ExcelReportData {
  filename: string;
  sheetName: string;
  title: string;
  subtitle?: string;
  headers: string[];
  data: any[][];
}

class EmailService {
  // –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ Excel-—Ñ–∞–π–ª–∞ –ø–æ email
  async sendExcel({ to, subject, filename, sheetName, title, subtitle, headers, data }: {
    to: string | string[];
    subject: string;
    filename: string;
    sheetName: string;
    title: string;
    subtitle?: string;
    headers: string[];
    data: any[][];
  }): Promise<boolean> {
    const excelBuffer = this.createExcelBuffer({ filename, sheetName, title, subtitle, headers, data });
    return await this.sendEmail({
      to: Array.isArray(to) ? to : [to],
      subject,
      text: title,
      attachments: [
        {
          filename,
          content: excelBuffer,
          contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        },
      ],
    });
  }

  private transporter: nodemailer.Transporter;

  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email
    this.transporter = nodemailer.createTransport({
      host: 'smtp.mail.ru', // –ó–∞–º–µ–Ω–∏—Ç—å –Ω–∞ —Ç–≤–æ–π SMTP-—Å–µ—Ä–≤–µ—Ä
      port: 465,
      secure: true,
      auth: {
        user: process.env.EMAIL_USER || 'dochky.1@mail.ru',
        pass: process.env.EMAIL_PASS || 'D1W0YffYmDPNtjRkWSgL'
      }
    });
  }

  // –°–æ–∑–¥–∞–Ω–∏–µ Excel —Ñ–∞–π–ª–∞ –∏–∑ –¥–∞–Ω–Ω—ã—Ö
  private createExcelBuffer(reportData: ExcelReportData): Buffer {
    const workbook = XLSX.utils.book_new();
    
    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ª–∏—Å—Ç–∞
    const worksheetData: any[][] = [];
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–∞ —Å –¥–∞—Ç–æ–π
    const currentDate = new Date().toLocaleDateString('ru-RU');
    worksheetData.push([`${reportData.title} - ${currentDate}`]);
    worksheetData.push([]); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –µ—Å–ª–∏ –µ—Å—Ç—å
    if (reportData.subtitle) {
      worksheetData.push([reportData.subtitle]);
      worksheetData.push([]); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫
    worksheetData.push(reportData.headers);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    worksheetData.push(...reportData.data);
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞
    worksheetData.push([]);
    worksheetData.push([`–î–æ–∫—É–º–µ–Ω—Ç —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏: ${currentDate} –≤ ${new Date().toLocaleTimeString('ru-RU')}`]);
    
    // –°–æ–∑–¥–∞–µ–º –ª–∏—Å—Ç
    const worksheet = XLSX.utils.aoa_to_sheet(worksheetData);
    
    // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
    const columnWidths = reportData.headers.map((header, index) => {
      const maxLength = Math.max(
        header.length,
        ...reportData.data.map(row => String(row[index] || '').length)
      );
      return { wch: Math.min(Math.max(maxLength + 2, 10), 50) };
    });
    
    worksheet['!cols'] = columnWidths;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–∏—Å—Ç –≤ –∫–Ω–∏–≥—É
    XLSX.utils.book_append_sheet(workbook, worksheet, reportData.sheetName);
    
    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –±—É—Ñ–µ—Ä
    return XLSX.write(workbook, { bookType: 'xlsx', type: 'buffer' }) as Buffer;
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ email —Å –≤–ª–æ–∂–µ–Ω–∏—è–º–∏
  async sendEmail(config: EmailConfig): Promise<boolean> {
    try {
      const mailOptions = {
        from: process.env.EMAIL_USER || process.env.EMAIL_USER,
        to: config.to.join(', '),
        subject: config.subject,
        text: config.text,
        attachments: config.attachments || []
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log('üìß Email sent successfully:', info.messageId);
      return true;
    } catch (error) {
      console.error('‚ùå Error sending email:', error);
      return false;
    }
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –º–µ—Å—è—á–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤
  async sendMonthlyReports(
    recipients: string[],
    reportsData: ExcelReportData[]
  ): Promise<boolean> {
    try {
      const currentDate = new Date();
      const monthNames = [
        '–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
        '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'
      ];
      
      const monthName = monthNames[currentDate.getMonth()];
      const year = currentDate.getFullYear();
      const period = `${monthName} ${year}`;

      // –°–æ–∑–¥–∞–µ–º –≤–ª–æ–∂–µ–Ω–∏—è –∏–∑ –æ—Ç—á–µ—Ç–æ–≤
      const attachments = reportsData.map(reportData => {
        const buffer = this.createExcelBuffer(reportData);
        const timestamp = currentDate.toISOString().slice(0, 10);
        
        return {
          filename: `${reportData.filename}_${timestamp}.xlsx`,
          content: buffer,
          contentType: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        };
      });

      const emailConfig: EmailConfig = {
        to: recipients,
        subject: `–ú–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞ - ${period}`,
        text: `
–î–æ–±—Ä—ã–π –¥–µ–Ω—å!

–ù–∞–ø—Ä–∞–≤–ª—è–µ–º –í–∞–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ ${period}:

${reportsData.map((report, index) => `${index + 1}. ${report.title}`).join('\n')}

–û—Ç—á–µ—Ç—ã —Å–æ–¥–µ—Ä–∂–∞—Ç:
- –ê–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –º–æ–º–µ–Ω—Ç —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è
- –î–∞—Ç—ã —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (–≥–¥–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
- –ü–æ–ª–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ—Ç—á–µ—Ç–Ω—ã–π –ø–µ—Ä–∏–æ–¥

–î–æ–∫—É–º–µ–Ω—Ç—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ ${currentDate.toLocaleDateString('ru-RU')} –≤ ${currentDate.toLocaleTimeString('ru-RU')}.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–æ–º
        `,
        attachments
      };

      return await this.sendEmail(emailConfig);
    } catch (error) {
      console.error('‚ùå Error sending monthly reports:', error);
      return false;
    }
  }

  // –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  async testConnection(): Promise<boolean> {
    try {
      await this.transporter.verify();
      console.log('‚úÖ SMTP connection verified successfully');
      return true;
    } catch (error) {
      console.error('‚ùå SMTP connection failed:', error);
      return false;
    }
  }
}

export default EmailService;
export { ExcelReportData, EmailConfig };
