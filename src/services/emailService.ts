import nodemailer from 'nodemailer';
import SMTPTransport from 'nodemailer/lib/smtp-transport';
import ExcelJS from 'exceljs';
import { Readable } from 'stream';

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö Excel –æ—Ç—á–µ—Ç–∞
 */
export interface ExcelReportData {
  filename: string;
  sheetName: string;
  title: string;
  subtitle?: string;
  headers: string[];
  data: any[][];
}

/**
 * –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–∞ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ
 */
interface PayrollReportData {
  month: string;
  totalEmployees: number;
  totalPayroll: number;
  details: Array<{
    staffName: string;
    baseSalary: number;
    penalties: number;
    total: number;
    status: string;
  }>;
}

class EmailService {
  private transporter: nodemailer.Transporter;

  constructor() {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ SMTP –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const smtpConfig: SMTPTransport.Options = {
      host: process.env.SMTP_HOST || 'smtp.example.com',
      port: parseInt(process.env.SMTP_PORT || '587'),
      secure: process.env.SMTP_SECURE === 'true', // true –¥–ª—è –ø–æ—Ä—Ç–∞ 465, false –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ—Ä—Ç–æ–≤
      auth: {
        user: process.env.SMTP_USER || 'user@example.com',
        pass: process.env.SMTP_PASS || 'password'
      }
    };

    this.transporter = nodemailer.createTransport(smtpConfig);
  }

  /**
   * –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ SMTP —Å–µ—Ä–≤–µ—Ä—É
   */
  async testConnection(): Promise<boolean> {
    try {
      await this.transporter.verify();
      console.log('‚úÖ Email service connection verified');
      return true;
    } catch (error) {
      console.error('‚ùå Email service connection failed:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Excel —Ñ–∞–π–ª–∞ –ø–æ email
   */
  async sendExcel(options: {
    to: string | string[];
    subject: string;
    filename: string;
    sheetName: string;
    title: string;
    subtitle?: string;
    headers: string[];
    data: any[][];
  }): Promise<any> {
    try {
      // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª
      const workbook = new ExcelJS.Workbook();
      const worksheet = workbook.addWorksheet(options.sheetName);

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
      worksheet.mergeCells('A1', `${String.fromCharCode(64 + options.headers.length)}1`);
      const titleCell = worksheet.getCell('A1');
      titleCell.value = options.title;
      titleCell.font = { bold: true, size: 14 };
      titleCell.alignment = { horizontal: 'center' };

      // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
      if (options.subtitle) {
        worksheet.mergeCells('A2', `${String.fromCharCode(64 + options.headers.length)}2`);
        const subtitleCell = worksheet.getCell('A2');
        subtitleCell.value = options.subtitle;
        subtitleCell.font = { italic: true, size: 12 };
        subtitleCell.alignment = { horizontal: 'center' };
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã
      const headerRow = worksheet.addRow(options.headers);
      headerRow.font = { bold: true };
      headerRow.fill = {
        type: 'pattern',
        pattern: 'solid',
        fgColor: { argb: 'FFCCCCCC' }
      };

      // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      options.data.forEach(rowData => {
        worksheet.addRow(rowData);
      });

      // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
      worksheet.columns.forEach(column => {
        let maxWidth = 0;
        if (column && typeof column.eachCell === 'function') {
          column.eachCell({ includeEmpty: true }, cell => {
            maxWidth = Math.max(maxWidth, cell.value ? cell.value.toString().length : 0);
          });
          column.width = Math.min(maxWidth + 2, 50);
        }
      });

      // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä —Å Excel —Ñ–∞–π–ª–æ–º
      const buffer = await workbook.xlsx.writeBuffer();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
      const mailOptions = {
        from: process.env.SMTP_FROM || 'noreply@example.com',
        to: options.to,
        subject: options.subject,
        text: `–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ —Ñ–∞–π–ª ${options.filename}.xlsx`,
        attachments: [
          {
            filename: `${options.filename}.xlsx`,
            content: buffer as unknown as Buffer
          }
        ]
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log(`üìß Excel file sent to ${Array.isArray(options.to) ? options.to.join(', ') : options.to}`);
      
      return info;
    } catch (error) {
      console.error('‚ùå Error sending Excel file:', error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –æ—Ç—á–µ—Ç–æ–≤ –ø–æ email
   */
  async sendMonthlyReports(recipients: string[], reportsData: ExcelReportData[]): Promise<boolean> {
    try {
      console.log(`üìß Preparing to send ${reportsData.length} monthly reports to ${recipients.length} recipients`);

      // –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –æ—Ç—á–µ—Ç–∞–º–∏
      const attachments: Array<{ filename: string; content: Buffer }> = [];
      
      for (const reportData of reportsData) {
        try {
          // –°–æ–∑–¥–∞–µ–º Excel —Ñ–∞–π–ª –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –æ—Ç—á–µ—Ç–∞
          const workbook = new ExcelJS.Workbook();
          const worksheet = workbook.addWorksheet(reportData.sheetName);

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
          worksheet.mergeCells('A1', `${String.fromCharCode(64 + reportData.headers.length)}1`);
          const titleCell = worksheet.getCell('A1');
          titleCell.value = reportData.title;
          titleCell.font = { bold: true, size: 14 };
          titleCell.alignment = { horizontal: 'center' };

          // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å
          if (reportData.subtitle) {
            worksheet.mergeCells('A2', `${String.fromCharCode(64 + reportData.headers.length)}2`);
            const subtitleCell = worksheet.getCell('A2');
            subtitleCell.value = reportData.subtitle;
            subtitleCell.font = { italic: true, size: 12 };
            subtitleCell.alignment = { horizontal: 'center' };
          }

          // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ —Ç–∞–±–ª–∏—Ü—ã (—Å —É—á–µ—Ç–æ–º –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Å–¥–≤–∏–≥–∞ –∏–∑-–∑–∞ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞)
          const headerRowIndex = reportData.subtitle ? 3 : 2;
          const headerRow = worksheet.addRow(reportData.headers);
          headerRow.font = { bold: true };
          headerRow.fill = {
            type: 'pattern',
            pattern: 'solid',
            fgColor: { argb: 'FFCCCCCC' }
          };

          // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
          reportData.data.forEach(rowData => {
            worksheet.addRow(rowData);
          });

          // –ê–≤—Ç–æ—à–∏—Ä–∏–Ω–∞ —Å—Ç–æ–ª–±—Ü–æ–≤
          worksheet.columns.forEach(column => {
            let maxWidth = 0;
            if (column && typeof column.eachCell === 'function') {
              column.eachCell({ includeEmpty: true }, cell => {
                maxWidth = Math.max(maxWidth, cell.value ? cell.value.toString().length : 0);
              });
              column.width = Math.min(maxWidth + 2, 50);
            }
          });

          // –°–æ–∑–¥–∞–µ–º –±—É—Ñ–µ—Ä —Å Excel —Ñ–∞–π–ª–æ–º
          const buffer = await workbook.xlsx.writeBuffer();
          
          attachments.push({
            filename: `${reportData.filename}.xlsx`,
            content: buffer as any
          });
        } catch (reportError) {
          console.error(`‚ùå Error processing report ${reportData.filename}:`, reportError);
        }
      }

      if (attachments.length === 0) {
        throw new Error('No reports could be generated');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ —Å–æ –≤—Å–µ–º–∏ –æ—Ç—á–µ—Ç–∞–º–∏
      const mailOptions = {
        from: process.env.SMTP_FROM || 'noreply@example.com',
        to: recipients,
        subject: `–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã –∑–∞ ${new Date().toLocaleDateString('ru-RU')}`,
        text: `–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –µ–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–æ–º.`,
        html: `
          <h2>–ï–∂–µ–º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã</h2>
          <p>–í–æ –≤–ª–æ–∂–µ–Ω–∏–∏ –Ω–∞—Ö–æ–¥—è—Ç—Å—è —Å–ª–µ–¥—É—é—â–∏–µ –æ—Ç—á–µ—Ç—ã:</p>
          <ul>
            ${reportsData.map(report => `<li>${report.title}${report.subtitle ? ` (${report.subtitle})` : ''}</li>`).join('')}
          </ul>
          <p><em>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</em></p>
        `,
        attachments
      };

      const info = await this.transporter.sendMail(mailOptions);
      console.log(`üìß Monthly reports sent successfully to ${recipients.join(', ')}`);
      
      return true;
    } catch (error) {
      console.error('‚ùå Error sending monthly reports:', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç—á–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –ø–æ email
   */
 async sendPayrollReportEmail(recipient: string, reportData: any): Promise<any> {
    try {
      console.log(`üìß –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –Ω–∞ ${recipient} –∑–∞ ${reportData.month}`);
      console.log(`üìä –î–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞: —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤=${reportData.totalEmployees}, –æ–±—â–∞—è —Å—É–º–º–∞=${reportData.totalPayroll}`);
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º HTML —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
      const htmlContent = `
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <title>–û—Ç—á–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –∑–∞ ${reportData.month}</title>
          <style>
            body { font-family: Arial, sans-serif; }
            table { border-collapse: collapse; width: 100%; }
            th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }
            th { background-color: #f2f2f2; }
            .summary { margin-top: 20px; }
            .footer { margin-top: 30px; font-size: 12px; color: #666; }
          </style>
        </head>
        <body>
          <h2>–û—Ç—á–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –∑–∞ ${reportData.month}</h2>
          
          <div class="summary">
            <p><strong>–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤:</strong> ${reportData.totalEmployees}</p>
            <p><strong>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç:</strong> ${reportData.totalPayroll.toLocaleString('ru-RU')} —Ç–≥</p>
          </div>
          
          <h3>–î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:</h3>
          <table>
            <thead>
              <tr>
                <th>–°–æ—Ç—Ä—É–¥–Ω–∏–∫</th>
                <th>–ë–∞–∑–æ–≤–∞—è –∑–∞—Ä–ø–ª–∞—Ç–∞</th>
                <th>–®—Ç—Ä–∞—Ñ—ã</th>
                <th>–ò—Ç–æ–≥–æ –∫ –≤—ã–ø–ª–∞—Ç–µ</th>
                <th>–°—Ç–∞—Ç—É—Å</th>
              </tr>
            </thead>
            <tbody>
              ${reportData.details.map((detail: any) => `
                <tr>
                  <td>${detail.staffName}</td>
                  <td>${detail.baseSalary.toLocaleString('ru-RU')} —Ç–≥</td>
                  <td>${detail.penalties.toLocaleString('ru-RU')} —Ç–≥</td>
                  <td><strong>${detail.total.toLocaleString('ru-RU')} —Ç–≥</strong></td>
                  <td>${detail.status}</td>
                </tr>
              `).join('')}
            </tbody>
          </table>
          
          <div class="footer">
            <p>–≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.</p>
            <p>–° —É–≤–∞–∂–µ–Ω–∏–µ–º,<br>–°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–æ–º</p>
          </div>
        </body>
        </html>
      `;
      
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –ø–∏—Å—å–º–∞
      const textContent = `
        –û—Ç—á–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –∑–∞ ${reportData.month}
        
        –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${reportData.totalEmployees}
        –û–±—â–∞—è —Å—É–º–º–∞ –∑–∞—Ä–ø–ª–∞—Ç: ${reportData.totalPayroll.toLocaleString('ru-RU')} —Ç–≥
        
        –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º:
        ${reportData.details.map((detail: any) =>
          `${detail.staffName}: ${detail.baseSalary.toLocaleString('ru-RU')} —Ç–≥ - ${detail.penalties.toLocaleString('ru-RU')} —Ç–≥ —à—Ç—Ä–∞—Ñ–æ–≤ = ${detail.total.toLocaleString('ru-RU')} —Ç–≥`
        ).join('\n')}
        
        ---
        –≠—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç—á–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ —ç—Ç–æ –ø–∏—Å—å–º–æ.
        –° —É–≤–∞–∂–µ–Ω–∏–µ–º,
        –°–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–æ–º
      `;
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–∏—Å—å–º–æ
      const mailOptions = {
        from: process.env.SMTP_FROM || 'noreply@example.com',
        to: recipient,
        subject: `–û—Ç—á–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–∞—Ö –∑–∞ ${reportData.month}`,
        text: textContent,
        html: htmlContent
      };
      
      console.log(`üìß –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞ –Ω–∞ ${recipient} —Å —Ç–µ–º–æ–π: ${mailOptions.subject}`);
      const info = await this.transporter.sendMail(mailOptions);
      console.log(`‚úÖ –û—Ç—á–µ—Ç –æ –∑–∞—Ä–ø–ª–∞—Ç–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ ${recipient}: ${info.messageId}`);
      
      return info;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –æ –∑–∞—Ä–ø–ª–∞—Ç–µ –Ω–∞ ${recipient}:`, error);
      throw error;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
   */
  async sendTestEmail(recipient: string): Promise<any> {
    try {
      const mailOptions = {
        from: process.env.SMTP_FROM || 'noreply@example.com',
        to: recipient,
        subject: '–¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–µ—Ç—Å–∫–∏–º —Å–∞–¥–æ–º',
        text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.',
        html: '<p>–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã.</p>'
      };
      
      const info = await this.transporter.sendMail(mailOptions);
      console.log(`üìß –¢–µ—Å—Ç–æ–≤–æ–µ –ø–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${recipient}: ${info.messageId}`);
      
      return info;
    } catch (error) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–∏—Å—å–º–∞ –Ω–∞ ${recipient}:`, error);
      throw error;
    }
  }
}

export default EmailService;
