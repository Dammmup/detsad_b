import cron from 'node-cron';
import ChildAttendance from '../models/ChildAttendance';
import StaffAttendance from '../models/StaffAttendance';
import User from '../models/Users';
import Group from '../models/Group';
import EmailService, { ExcelReportData } from './emailService';

class DataCleanupService {
  private emailService: EmailService;

  constructor() {
    this.emailService = new EmailService();
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
  private async getChildrenListData(): Promise<ExcelReportData> {
    try {
      const children = await User.find({ type: 'child' });
      const groups = await Group.find({});
      
      const data = children.map(child => {
        const group = groups.find(g => (g as any)?._id?.toString() === child.groupId?.toString());
        return [
          child.fullName || '',
          child.birthday ? (child.birthday as any).toLocaleDateString?.() || child.birthday.toString() : '',
          group?.name || '',
          child.parentName || '',
          child.parentPhone || '',
          (child as any).address || '',
          child.createdAt ? (child.createdAt as any).toLocaleDateString?.() || child.createdAt.toString() : '',
          '–ê–∫—Ç–∏–≤–Ω—ã–π'
        ];
      });

      return {
        filename: '–°–ø–∏—Å–æ–∫_–¥–µ—Ç–µ–π',
        sheetName: '–°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π',
        title: '–°–ø–∏—Å–æ–∫ –¥–µ—Ç–µ–π –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞',
        headers: [
          '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞',
          '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', 
          '–ì—Ä—É–ø–ø–∞',
          '–§–ò–û —Ä–æ–¥–∏—Ç–µ–ª—è',
          '–¢–µ–ª–µ—Ñ–æ–Ω',
          '–ê–¥—Ä–µ—Å',
          '–î–∞—Ç–∞ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è',
          '–°—Ç–∞—Ç—É—Å'
        ],
        data
      };
    } catch (error) {
      console.error('Error getting children list data:', error);
      throw error;
    }
  }

  private async getStaffListData(): Promise<ExcelReportData> {
    try {
      const staff = await User.find({ type: 'adult' });
      const groups = await Group.find({});
      
      const data = staff.map(member => {
        const group = groups.find(g => (g as any)?._id?.toString() === member.groupId?.toString());
        return [
          member.fullName || '',
          member.role || '',
          group?.name || '',
          member.phone || '',
          (member as any).email || '',
          member.createdAt ? (member.createdAt as any).toLocaleDateString?.() || member.createdAt.toString() : '',
          '–ê–∫—Ç–∏–≤–Ω—ã–π',
          member.salary ? `${member.salary} —Ç–µ–Ω–≥–µ` : ''
        ];
      });

      return {
        filename: '–°–ø–∏—Å–æ–∫_—Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        sheetName: '–°–æ—Ç—Ä—É–¥–Ω–∏–∫–∏',
        title: '–°–ø–∏—Å–æ–∫ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –¥–µ—Ç—Å–∫–æ–≥–æ —Å–∞–¥–∞',
        headers: [
          '–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
          '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
          '–ì—Ä—É–ø–ø–∞', 
          '–¢–µ–ª–µ—Ñ–æ–Ω',
          'Email',
          '–î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞',
          '–°—Ç–∞—Ç—É—Å',
          '–ó–∞—Ä–ø–ª–∞—Ç–∞'
        ],
        data
      };
    } catch (error) {
      console.error('Error getting staff list data:', error);
      throw error;
    }
  }

  private async getChildrenAttendanceData(): Promise<ExcelReportData> {
    try {
      const lastMonth = new Date();
      lastMonth.setMonth(lastMonth.getMonth() - 1);
      
      const startOfMonth = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1);
      const endOfMonth = new Date(lastMonth.getFullYear(), lastMonth.getMonth() + 1, 0);
      
      const attendance = await ChildAttendance.find({
        date: {
          $gte: startOfMonth,
          $lte: endOfMonth
        }
      });

      const children = await User.find({ type: 'child' });
      const groups = await Group.find({});
      
      const data = attendance.map(record => {
        const child = children.find(c => (c as any)?._id?.toString() === record.childId.toString());
        const group = groups.find(g => (g as any)?._id?.toString() === record.groupId?.toString());
        
        const date = new Date(record.date);
        const weekdays = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
        const formattedDate = `${date.toLocaleDateString('ru-RU')} (${weekdays[date.getDay()]})`;
        
        return [
          child?.fullName || '',
          formattedDate,
          record.status === 'present' ? '–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª' :
          record.status === 'absent' ? '–û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª' :
          record.status === 'late' ? '–û–ø–æ–∑–¥–∞–ª' :
          record.status === 'sick' ? '–ë–æ–ª–µ–ª' : record.status || '',
          record.checkInTime || '',
          record.checkOutTime || '',
          group?.name || '',
          record.notes || ''
        ];
      });

      const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                         '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
      const period = `${monthNames[lastMonth.getMonth()]} ${lastMonth.getFullYear()}`;

      return {
        filename: `–¢–∞–±–µ–ª—å_–ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏_–¥–µ—Ç–µ–π`,
        sheetName: '–¢–∞–±–µ–ª—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏',
        title: '–¢–∞–±–µ–ª—å –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–µ—Ç–µ–π',
        subtitle: `–ü–µ—Ä–∏–æ–¥: ${period}`,
        headers: [
          '–§–ò–û —Ä–µ–±–µ–Ω–∫–∞',
          '–î–∞—Ç–∞',
          '–°—Ç–∞—Ç—É—Å',
          '–í—Ä–µ–º—è –ø—Ä–∏—Ö–æ–¥–∞',
          '–í—Ä–µ–º—è —É—Ö–æ–¥–∞', 
          '–ì—Ä—É–ø–ø–∞',
          '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
        ],
        data
      };
    } catch (error) {
      console.error('Error getting children attendance data:', error);
      throw error;
    }
  }

  private async getStaffAttendanceData(): Promise<ExcelReportData> {
    try {
      const lastMonth = new Date();
      lastMonth.setMonth(lastMonth.getMonth() - 1);
      
      const startOfMonth = new Date(lastMonth.getFullYear(), lastMonth.getMonth(), 1);
      const endOfMonth = new Date(lastMonth.getFullYear(), lastMonth.getMonth() + 1, 0);
      
      const attendance = await StaffAttendance.find({
        date: {
          $gte: startOfMonth,
          $lte: endOfMonth
        }
      });

      const staff = await User.find({ type: 'adult' });
      const groups = await Group.find({});
      
      const data = attendance.map(record => {
        const staffMember = staff.find(s => (s as any)?._id?.toString() === record.staffId.toString());
        const group = groups.find(g => (g as any)?._id?.toString() === record.groupId?.toString());
        
        const date = new Date(record.date);
        const weekdays = ['–í—Å', '–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±'];
        const formattedDate = `${date.toLocaleDateString('ru-RU')} (${weekdays[date.getDay()]})`;
        
        return [
          staffMember?.fullName || '',
          formattedDate,
          record.shiftType || '',
          `${record.scheduledStart || ''} - ${record.scheduledEnd || ''}`,
          `${record.actualStart || ''} - ${record.actualEnd || ''}`,
          record.lateMinutes || 0,
          record.overtimeMinutes || 0,
          record.status === 'completed' ? '–ó–∞–≤–µ—Ä—à–µ–Ω–æ' :
          record.status === 'in_progress' ? '–í –ø—Ä–æ—Ü–µ—Å—Å–µ' :
          record.status === 'late' ? '–û–ø–æ–∑–¥–∞–Ω–∏–µ' :
          record.status === 'no_show' ? '–ù–µ —è–≤–∏–ª—Å—è' : record.status || '',
          group?.name || '',
          record.notes || ''
        ];
      });

      const monthNames = ['–Ø–Ω–≤–∞—Ä—å', '–§–µ–≤—Ä–∞–ª—å', '–ú–∞—Ä—Ç', '–ê–ø—Ä–µ–ª—å', '–ú–∞–π', '–ò—é–Ω—å',
                         '–ò—é–ª—å', '–ê–≤–≥—É—Å—Ç', '–°–µ–Ω—Ç—è–±—Ä—å', '–û–∫—Ç—è–±—Ä—å', '–ù–æ—è–±—Ä—å', '–î–µ–∫–∞–±—Ä—å'];
      const period = `${monthNames[lastMonth.getMonth()]} ${lastMonth.getFullYear()}`;

      return {
        filename: `–¢–∞–±–µ–ª—å_—Ä–∞–±–æ—á–µ–≥–æ_–≤—Ä–µ–º–µ–Ω–∏`,
        sheetName: '–¢–∞–±–µ–ª—å —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏',
        title: '–¢–∞–±–µ–ª—å —É—á–µ—Ç–∞ —Ä–∞–±–æ—á–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤',
        subtitle: `–ü–µ—Ä–∏–æ–¥: ${period}`,
        headers: [
          '–§–ò–û —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞',
          '–î–∞—Ç–∞',
          '–¢–∏–ø —Å–º–µ–Ω—ã',
          '–ü–ª–∞–Ω–æ–≤–æ–µ –≤—Ä–µ–º—è',
          '–§–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –≤—Ä–µ–º—è',
          '–û–ø–æ–∑–¥–∞–Ω–∏–µ (–º–∏–Ω)',
          '–°–≤–µ—Ä—Ö—É—Ä–æ—á–Ω—ã–µ (–º–∏–Ω)',
          '–°—Ç–∞—Ç—É—Å',
          '–ì—Ä—É–ø–ø–∞',
          '–ü—Ä–∏–º–µ—á–∞–Ω–∏—è'
        ],
        data
      };
    } catch (error) {
      console.error('Error getting staff attendance data:', error);
      throw error;
    }
  }

  // –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π (—Å—Ç–∞—Ä—à–µ –º–µ—Å—è—Ü–∞)
  private async cleanupOldRecords(): Promise<void> {
    try {
      const oneMonthAgo = new Date();
      oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);

      console.log(`üßπ Starting cleanup of records older than ${oneMonthAgo.toLocaleDateString('ru-RU')}`);

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ –¥–µ—Ç–µ–π
      const deletedChildAttendance = await ChildAttendance.deleteMany({
        date: { $lt: oneMonthAgo }
      });

      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –ø–æ—Å–µ—â–∞–µ–º–æ—Å—Ç–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤
      const deletedStaffAttendance = await StaffAttendance.deleteMany({
        date: { $lt: oneMonthAgo }
      });

      console.log(`‚úÖ Cleanup completed:`);
      console.log(`   - Child attendance records deleted: ${deletedChildAttendance.deletedCount}`);
      console.log(`   - Staff attendance records deleted: ${deletedStaffAttendance.deletedCount}`);

    } catch (error) {
      console.error('‚ùå Error during cleanup:', error);
      throw error;
    }
  }

  // –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–µ—Å—è—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
  async performMonthlyTasks(): Promise<void> {
    try {
      console.log('üìä Starting monthly tasks...');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å–µ—Ö –æ—Ç—á–µ—Ç–æ–≤
      const [
        childrenListData,
        staffListData,
        childrenAttendanceData,
        staffAttendanceData
      ] = await Promise.all([
        this.getChildrenListData(),
        this.getStaffListData(),
        this.getChildrenAttendanceData(),
        this.getStaffAttendanceData()
      ]);

      const reportsData = [
        childrenListData,
        staffListData,
        childrenAttendanceData,
        staffAttendanceData
      ];

      // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤
      const admins = await User.find({ role: 'admin' });
      const adminEmails = admins
        .filter(admin => (admin as any).email)
        .map(admin => (admin as any).email!);

      if (adminEmails.length === 0) {
        console.warn('‚ö†Ô∏è No admin emails found for sending reports');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ—Å—è—á–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
      const emailSent = await this.emailService.sendMonthlyReports(adminEmails, reportsData);
      
      if (emailSent) {
        console.log('‚úÖ Monthly reports sent successfully');
        
        // –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç—á–µ—Ç–æ–≤ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
        await this.cleanupOldRecords();
      } else {
        console.error('‚ùå Failed to send monthly reports');
      }

    } catch (error) {
      console.error('‚ùå Error performing monthly tasks:', error);
    }
  }

  // –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
  startScheduler(): void {
    // –ó–∞–ø—É—Å–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞ –≤ 23:00
    cron.schedule('0 23 28-31 * *', async () => {
      const tomorrow = new Date();
      tomorrow.setDate(tomorrow.getDate() + 1);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ –º–µ—Å—è—Ü–∞
      if (tomorrow.getDate() === 1) {
        console.log('üìÖ End of month detected, starting monthly tasks...');
        await this.performMonthlyTasks();
      }
    });

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞ –≤ 00:30 (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏)
    cron.schedule('30 0 1 * *', async () => {
      console.log('üìÖ First day of month backup check...');
      await this.performMonthlyTasks();
    });

    console.log('‚è∞ Monthly scheduler started');
  }

  // –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –º–µ—Å—è—á–Ω—ã—Ö –∑–∞–¥–∞—á
  async testMonthlyTasks(): Promise<void> {
    console.log('üß™ Running test monthly tasks...');
    await this.performMonthlyTasks();
  }
}

export default DataCleanupService;
